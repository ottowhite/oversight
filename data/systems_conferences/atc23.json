[
  {
    "title": "Bifrost: Analysis and Optimization of Network I/O Tax in Confidential Virtual Machines",
    "authors": "Dingji Li,Institute of Parallel and Distributed Systems, SEIEE, Shanghai Jiao Tong University; Engineering Research Center for Domain-specific Operating Systems, Ministry of Education, China; MoE Key Lab of Artificial Intelligence, AI Institute, Shanghai Jiao Tong University;Zeyu Mi, Chenhui Ji, Yifan Tan, and Binyu Zang,Institute of Parallel and Distributed Systems, SEIEE, Shanghai Jiao Tong University; Engineering Research Center for Domain-specific Operating Systems, Ministry of Education, China;Haibing Guan,Shanghai Key Laboratory of Scalable Computing and Systems, Shanghai Jiao Tong University;Haibo Chen,Institute of Parallel and Distributed Systems, SEIEE, Shanghai Jiao Tong University; Engineering Research Center for Domain-specific Operating Systems, Ministry of Education, China",
    "abstract": "Existing confidential VMs (CVMs) experience notable network performance overhead compared to traditional VMs. We present the first thorough performance analysis of various network-intensive applications in CVMs and find that the CVM-IO tax, which mainly comprises the bounce buffer mechanism and the packet processing in CVMs, has a significant impact on network I/O performance. Specifically, the CVM-IO tax squeezes out virtual CPU (vCPU) resources of performance-critical application workloads and may occupy more than 50% of CPU cycles. To minimize the CVM-IO tax, this paper proposes Bifrost, a novel para-virtualized I/O design that 1) eliminates the I/O payload bouncing tax by removing redundant encryption and 2) reduces the packet processing tax via pre-receiver packet reassembly, while still ensuring the same level of security guarantees. We have implemented a Bifrost prototype with only minor modifications to the guest Linux kernel and the userspace network I/O backend. Evaluation results on both AMD and Intel servers demonstrate that Bifrost significantly improves the performance of I/O-intensive applications in CVMs, and even outperforms the traditional VM by up to 21.50%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/li-dingji",
    "session_title": "Security and Privacy",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "ab77120e-4b75-4fb4-9eae-10c54e00fd95"
  },
  {
    "title": "SecretFlow-SPU: A Performant and User-Friendly Framework for Privacy-Preserving Machine Learning",
    "authors": "Junming Ma, Yancheng Zheng, Jun Feng, Derun Zhao, Haoqi Wu, Wenjing Fang, Jin Tan, Chaofan Yu, Benyu Zhang, and Lei Wang,Ant Group",
    "abstract": "With the increasing public attention to data security and privacy protection, privacy-preserving machine learning (PPML) has become a research hotspot in recent years. Secure multi-party computation (MPC) that allows multiple parties to jointly compute a function without leaking sensitive data provides a feasible solution to PPML. However, developing efficient PPML programs with MPC techniques is a great challenge for users without cryptography backgrounds.\nExisting solutions require users to make efforts to port machine learning (ML) programs by mechanically replacing APIs with PPML versions or rewriting the entire program. Different from the existing works, we propose SecretFlow-SPU, a performant and user-friendly PPML framework compatible with existing ML programs. SecretFlow-SPU consists of a frontend compiler and a backend runtime. The frontend compiler accepts an ML program as input and converts it into an MPC-specific intermediate representation. After a series of delicate code optimizations, programs will be executed by a performant backend runtime as MPC protocols. Based on SecretFlow-SPU, we can run ML programs of different frameworks with minor modifications in a privacy-preserving manner.\nWe evaluate SecretFlow-SPU with state-of-the-art MPC-enabled PPML frameworks on a series of ML training tasks. SecretFlow-SPU outperforms these works for almost all experimental settings (23 out of 24). Especially under the wide area network, SecretFlow-SPU is up to 4.1× faster than MP-SPDZ and up to 2.3× faster than TF Encrypted.",
    "link": "https://www.usenix.org/conference/atc23/presentation/ma",
    "session_title": "Security and Privacy",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "0d17981e-dc83-413c-9353-6c770e41a297"
  },
  {
    "title": "Portunus: Re-imagining Access Control in Distributed Systems",
    "authors": "Watson Ladd,Akamai;Tanya Verma,Cloudflare;Marloes Venema,University of Wuppertal;Armando Faz-Hernández,Cloudflare;Brendan McMillion,unaffiliated;Avani Wildani and Nick Sullivan,Cloudflare",
    "abstract": "TLS termination, which is essential to network and security infrastructure providers, is an extremely latency-sensitive operation that benefits from access to sensitive key material close to the edge. However, increasing regulatory concerns prompt customers to demand sophisticated controls on where their keys may be accessed. While traditional access-control solutions rely on a highly-available centralized process to enforce access, the round-trip latency and decreased fault tolerance make this approach unappealing. Furthermore, the desired level of customer control is at odds with the homogeneity of the distribution process for each key.\nTo solve this dilemma, we have designed and implemented Portunus, a cryptographic storage and access control system built using a variant of public-key cryptography called attribute-based encryption (ABE). Using Portunus, TLS keys are protected using ABE under a policy chosen by the customer. Each server is issued unique ABE keys based on its attributes, allowing it to decrypt only the TLS keys for which it satisfies the policy. Thus, the encrypted keys can be stored at the edge, with access control enforced passively through ABE. If a server receives a TLS connection but is not authorized to decrypt the necessary TLS key, the request is forwarded directly to the nearest authorized server, further avoiding the need for a centralized coordinator. In comparison, a trivial instantiation of this system using standard public-key cryptography might wrap each TLS key with the key of every authorized data center. This strategy, however, multiplies the storage overhead by the number of data centers. Deployed across Cloudflare's 400+ global data centers, Portunus handles millions of requests per second globally, making it one of the largest deployments of ABE.",
    "link": "https://www.usenix.org/conference/atc23/presentation/ladd",
    "session_title": "Security and Privacy",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "eae47ae1-f7cb-44ef-a2d1-54cf4dae28a5"
  },
  {
    "title": "GLogS: Interactive Graph Pattern Matching Query At Large Scale",
    "authors": "Longbin Lai,Alibaba Group, China;Yufan Yang,The Chinese University of Hong Kong, Shenzhen;Zhibin Wang,Nanjing University;Yuxuan Liu and Haotian Ma,The Chinese University of Hong Kong, Shenzhen;Sijie Shen, Bingqing Lyu, Xiaoli Zhou, Wenyuan Yu, and Zhengping Qian,Alibaba Group, China;Chen Tian and Sheng Zhong,Nanjing University;Yeh-Ching Chung,The Chinese University of Hong Kong, Shenzhen;Jingren Zhou,Alibaba Group, China",
    "abstract": "Interactive GPM (iGPM) is becoming increasingly important, where a series of graph pattern matching (GPM) queries are created and submitted in an interactive manner based on the insights provided by the prior queries. To solve the iGPM problem, three key considerations must be taken into account: performance, usability and scalability, namely if results can be returned in a timely manner, if queries can be written in a declarative way without the need of imperative fine-tune, and if it can work on large graphs. In this paper, we propose the GLogS system that allows users to interactively submit queries using a declarative language. The system will compile and automatically compute optimal execution plans for the queries, and execute them on an existing distributed dataflow engine. In the evaluation, we compare GLogS with the alternatives systems Neo4j and TigerGraph. GLogS outperforms Neo4j by 51 × on a single machine due to better execution plans. Additionally, GLogS can scale to processing large graphs with distributed capability. While compared to TigerGraph, GLogS is superior in usability, featuring an optimizer that can automatically compute optimal execution plans, eliminating the need of manual query tuning as required in TigerGraph.",
    "link": "https://www.usenix.org/conference/atc23/presentation/lai",
    "session_title": "Searching Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "0eff61ff-45fe-4c15-adac-a2778e0ed4d1"
  },
  {
    "title": "Cyclosa: Redundancy-Free Graph Pattern Mining via Set Dataflow",
    "authors": "Chuangyi Gui,National Engineering Research Center for Big Data Technology and System/Service Computing Technology and System Lab/Cluster and Grid Computing Lab, Huazhong University of Science and Technology, China; Zhejiang Lab, China;Xiaofei Liao,National Engineering Research Center for Big Data Technology and System/Service Computing Technology and System Lab/Cluster and Grid Computing Lab, Huazhong University of Science and Technology, China;Long Zheng,National Engineering Research Center for Big Data Technology and System/Service Computing Technology and System Lab/Cluster and Grid Computing Lab, Huazhong University of Science and Technology, China; Zhejiang Lab, China;Hai Jin,National Engineering Research Center for Big Data Technology and System/Service Computing Technology and System Lab/Cluster and Grid Computing Lab, Huazhong University of Science and Technology, China",
    "abstract": "Graph pattern mining is an essential task in many fields, which explores all the instances of user-interested patterns in a data graph. Pattern-centric mining systems transform the patterns into a series of set operations to guide the exploration and substantially outperform the embedding-centric counterparts that exhaustively enumerate all subgraphs. These systems provide novel specializations to achieve optimum search space, but the inherent redundancies caused by recurrent set intersections on the same or different subgraph instances remain and are difficult to trace, significantly degrading the performance.\nIn this paper, we propose a dataflow-based graph pattern mining framework named Cyclosa to eliminate the above redundancies by utilizing the concept of computation similarity. Cyclosa is characterized by three features. First, it reorganizes the set operations for a pattern into a set dataflow representation which can elegantly indicate the possibility of redundancies while sustaining the optimal scheduling for high performance. Second, the dataflow-guided parallel execution engine decouples data access and computations to enable efficient results sharing. Third, the memory-friendly data management substrate can automatically manage the computation results with high reuse possibility. Evaluation of different patterns demonstrates that Cyclosa outperforms state-of-the-art pattern-centric systems\nGraphPi and SumPA by up to 16.28× and 5.52×, respectively.",
    "link": "https://www.usenix.org/conference/atc23/presentation/gui",
    "session_title": "Searching Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "58603050-e056-40c0-a7ad-47bbda44ac40"
  },
  {
    "title": "SOWalker: An I/O-Optimized Out-of-Core Graph Processing System for Second-Order Random Walks",
    "authors": "Yutong Wu, Zhan Shi, Shicai Huang, Zhipeng Tian, Pengwei Zuo, Peng Fang, Fang Wang, and Dan Feng,Wuhan National Laboratory for Optoelectronics Huazhong University of Science and Technology",
    "abstract": "Random walks serve as a powerful tool for extracting information that exists in a wide variety of real-world scenarios. Different from the traditional first-order random walk, the second-order random walk considers recent walk history in selecting the next stop, which facilitates to model higher-order structures in real-world data. To meet the scalability of random walks, researchers have developed many out-of-core graph processing systems based on a single machine. However, the main focus of out-of-core graph processing systems is to support first-order random walks, which no longer perform well for second-order random walks.\nIn this paper, we propose an I/O-optimized out-of-core graph processing system for second-order random walks, called SOWalker. First, we propose a walk matrix to avoid loading non-updatable walks and eliminate useless walk I/Os. Second, we develop a benefit-aware I/O model to load multiple blocks with the maximum accumulated updatable walks, so as to improve the I/O utilization. Finally, we adopt a block set-oriented walk updating scheme, which allows each walk to move as many steps as possible in the loaded block set, thus significantly boosting the walk updating rate. Compared with two state-of-the-art random walk systems, GraphWalker and GraSorw, SOWalker yields significant performance speedups (up to 10.2×).",
    "link": "https://www.usenix.org/conference/atc23/presentation/wu",
    "session_title": "Searching Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "b44a7b02-5488-40fe-bbce-8db2a815017c"
  },
  {
    "title": "Light-Dedup: A Light-weight Inline Deduplication Framework for Non-Volatile Memory File Systems",
    "authors": "Jiansheng Qiu, Yanqi Pan, Wen Xia, Xiaojia Huang, Wenjun Wu, Xiangyu Zou, and Shiyi Li,Harbin Institute of Technology, Shenzhen;Yu Hua,Huazhong University of Science and Technology",
    "abstract": "Emerging NVM is promising to become the next-generation storage media. However, its high cost hinders its development. Recent deduplication researches in NVM file systems demonstrate that NVM's cost can be reduced by eliminating redundant data blocks, but their design lacks complete insights into NVM's I/O mechanisms.\nWe propose Light-Dedup, a light-weight inline deduplication framework for NVM file systems that performs fast block-level deduplication while taking NVM's I/O mechanisms into consideration. Specifically, Light-Dedup proposes Light-Redundant-Block-Identifier (LRBI), which combines non-cryptographic hash with a speculative-prefetch-based byte-by-byte content-comparison approach. LRBI leverages the memory interface of NVM to enable asynchronous reads by speculatively prefetching in-NVM data blocks into the CPU/NVM buffers. Thus, NVM's read latency seen by content-comparison is markedly reduced due to buffer hits. Moreover, Light-Dedup adopts an in-NVM Light-Meta-Table (LMT) to store deduplication metadata and collaborate with LRBI. LMT is organized in the region granularity, which significantly reduces metadata I/O amplification and improves deduplication performance.\nExperimental results suggest Light-Dedup achieves 1.01--8.98× I/O throughput over the state-of-the-art NVM deduplication file systems. Here, the speculative prefetch technique used in LRBI improves Light-Dedup by 0.3--118%. In addition, the region-based layout of LMT reduces metadata read/write amplification from 19.35× /9.86× to 6.10× /3.43× in our hand-crafted aging workload.",
    "link": "https://www.usenix.org/conference/atc23/presentation/qiu-jiansheng",
    "session_title": "Deduplication",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "89d3fcb1-93dd-48d0-8e98-bf4ee52fd11a"
  },
  {
    "title": "TiDedup: A New Distributed Deduplication Architecture for Ceph",
    "authors": "Myoungwon Oh and Sungmin Lee,Samsung Electronics Co.;Samuel Just,IBM;Young Jin Yu and Duck-Ho Bae,Samsung Electronics Co.;Sage Weil,Ceph Foundation;Sangyeun Cho,Samsung Electronics Co.;Heon Y. Yeom,Seoul National University",
    "abstract": "This paper presents TiDedup, a new cluster-level deduplication architecture for Ceph, a widely deployed distributed storage system. Ceph introduced a cluster-level deduplication design before; unfortunately, a few shortcomings have made it hard to use in production: (1) Deduplication of unique data incurs excessive metadata consumption; (2) Its serialized tiering mechanism has detrimental effects on foreground I/Os, and by design, only provides fixed-sized chunking algorithms; and (3) The existing reference count mechanism resorts to inefficient full scan of entire objects, and does not work with Ceph’s snapshot. TiDedup effectively overcomes these shortcomings by introducing three novel schemes: Selective cluster-level crawling, an event-driven tiering mechanism with content defined chunking, and a reference correction method using a shared reference back pointer. We have fully validated TiDedup and integrated it into the Ceph mainline, ready for evaluation and deployment in various experimental and production environments. Our evaluation results show that TiDedup achieves up to 34% data reduction on real-world workloads, and when compared with the existing deduplication design, improves foreground I/O throughput by 50% during deduplication, and significantly reduces the scan time for reference correction by more than 50%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/oh",
    "session_title": "Deduplication",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "22fb1c2d-10bb-413d-98be-c187c6bb6c53"
  },
  {
    "title": "LoopDelta: Embedding Locality-aware Opportunistic Delta Compression in Inline Deduplication for Highly Efficient Data Reduction",
    "authors": "Yucheng Zhang,School of Mathematics and Computer Sciences, Nanchang University and Wuhan National Laboratory for Optoelectronics, Huazhong University of Science and Technology;Hong Jiang,Department of Computer Science and Engineering, University of Texas at Arlington;Dan Feng,Wuhan National Laboratory for Optoelectronics, Huazhong University of Science and Technology;Nan Jiang,School of Information Engineering, East China Jiaotong University;Taorong Qiu and Wei Huang,School of Mathematics and Computer Sciences, Nanchang University",
    "abstract": "As a complement to data deduplication, delta compression further reduces the data volume by compressing non-duplicate data chunks relative to their similar chunks (base chunks). However, existing post-deduplication delta compression approaches for backup storage either suffer from the low similarity between many detected chunks or miss some potential similar chunks, or suffer from low (backup and restore) throughput due to extra I/Os for reading base chunks or add additional service-disruptive operations to backup systems.\nIn this paper, we propose LoopDelta to address the above-mentioned problems by an enhanced embedding delta compression scheme in deduplication in a non-intrusive way. The enhanced delta compression scheme combines four key techniques: (1) dual-locality-based similarity tracking to detect potential similar chunks by exploiting both logical and physical locality, (2) locality-aware prefetching to prefetch base chunks to avoid extra I/Os for reading base chunks on the write path, (3) cache-aware filter to avoid extra I/Os for base chunks on the read path, and (4) inversed delta compression to perform delta compression for data chunks that are otherwise forbidden to serve as base chunks by rewriting techniques designed to improve restore performance.\nExperimental results indicate that LoopDelta increases the compression ratio by 1.24∼10.97 times on top of deduplication, without notably affecting the backup throughput, and it improves the restore performance by 1.2∼3.57 times.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhang-yucheng",
    "session_title": "Deduplication",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "493ec8cb-b1bc-4b3f-9306-6f80200c50f6"
  },
  {
    "title": "TC-GNN: Bridging Sparse GNN Computation and Dense Tensor Cores on GPUs",
    "authors": "Yuke Wang, Boyuan Feng, Zheng Wang, Guyue Huang, and Yufei Ding,University of California, Santa Barbara",
    "abstract": "Recently, graph neural networks (GNNs), as the backbone of graph-based machine learning, demonstrate great success in various domains (e.g., e-commerce). However, the performance of GNNs is usually unsatisfactory due to the highly sparse and irregular graph-based operations. To this end, we propose TC-GNN, the first GNN acceleration framework based on GPU Tensor Core Units (TCUs). The core idea is to reconcile the \"Sparse\" GNN computation with the high-performance \"Dense\" TCUs. Specifically, we conduct an in-depth analysis of the sparse operations in mainstream GNN computing frameworks. We introduce a novel sparse graph translation technique to facilitate TCU processing of the sparse GNN workload. We implement an effective CUDA core and TCU collaboration design to fully utilize GPU resources. We integrate MGG with the PyTorch framework for high programmability. Rigorous experiments show an average of 1.70× speedup over the state-of-the-art DGL framework across various models and datasets.",
    "link": "https://www.usenix.org/conference/atc23/presentation/wang-yuke",
    "session_title": "Structuring Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "32f67b2d-956c-4550-99d0-bb5b4f8b9226"
  },
  {
    "title": "Legion: Automatically Pushing the Envelope of Multi-GPU System for Billion-Scale GNN Training",
    "authors": "Jie Sun,Collaborative Innovation Center of Artificial Intelligence, Zhejiang University, China;Li Su,Alibaba Group;Zuocheng Shi,Collaborative Innovation Center of Artificial Intelligence, Zhejiang University, China;Wenting Shen,Alibaba Group;Zeke Wang,Collaborative Innovation Center of Artificial Intelligence, Zhejiang University, China;Lei Wang,Alibaba Group;Jie Zhang,Collaborative Innovation Center of Artificial Intelligence, Zhejiang University, China;Yong Li, Wenyuan Yu, and Jingren Zhou,Alibaba Group;Fei Wu,Collaborative Innovation Center of Artificial Intelligence, Zhejiang University, China and Shanghai Institute for Advanced Study of Zhejiang University, China",
    "abstract": "Graph neural network(GNN) has been widely applied in real-world applications, such as product recommendation in e-commerce platforms and risk control in financial management systems. Several cache-based GNN systems have been built to accelerate GNN training in a single machine with multiple GPUs. However, these systems fail to train billion-scale graphs efficiently, which is a common challenge in the industry. In this work, we propose Legion, a system that automatically pushes the envelope of multi-GPU systems for accelerating billion-scale GNN training. First, we design a hierarchical graph partitioning mechanism that significantly improves the multi-GPU cache performance. Second, we build a unified multi-GPU cache that helps to reduce the PCIe traffic incurred by accessing both graph topology and features. Third, we develop an automatic cache management mechanism that adapts the multi-GPU cache plan according to the hardware specifications to maximize the overall training throughput. Evaluations on various GNN models and multiple datasets show that Legion supports training billion-scale GNNs in a single machine and significantly outperforms the state-of-the-art cache-based systems.",
    "link": "https://www.usenix.org/conference/atc23/presentation/sun",
    "session_title": "Structuring Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "aa1012c8-eb2f-4e3c-b132-059b28faec76"
  },
  {
    "title": "Bridging the Gap between Relational OLTP and Graph-based OLAP",
    "authors": "Sijie Shen,Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University and Alibaba Group;Zihang Yao and Lin Shi,Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University;Lei Wang, Longbin Lai, Qian Tao, and Li Su,Alibaba Group;Rong Chen,Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University and Shanghai AI Laboratory;Wenyuan Yu,Alibaba Group;Haibo Chen and Binyu Zang,Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University;Jingren Zhou,Alibaba Group",
    "abstract": "Recently, many applications have required the ability to perform dynamic graph analytical processing (GAP) tasks on the datasets generated by relational OLTP in real time. To meet the two key requirements of performance and freshness, this paper presents GART, an in-memory system that extends hybrid transactional/analytical processing (HTAP) systems to support GAP, resulting in hybrid transactional and graph analytical processing (HTGAP). GART fulfills two unique goals that are not encountered by HTAP systems. First, to adapt to rich workloads flexibility, GART proposes transparent data model conversion by graph extraction interfaces, which define rules for relational-graph mapping. Second, to ensure GAP performance, GART proposes an efficient dynamic graph storage with good locality that stems from key insights into HTGAP workloads, including (1) an efficient and mutable compressed sparse row (CSR) representation to guarantee the locality of edge scan, (2) a coarse-grained multi-version concurrency control (MVCC) scheme to reduce the temporal and spatial overhead of versioning, and (3) a flexible property storage to efficiently run different GAP workloads. Evaluations show that GART performs several orders of magnitude better than existing solutions in terms of freshness or performance. Meanwhile, for GAP workloads on the LDBC SNB dataset, GART outperforms the state-of-the-art general-purpose dynamic graph storage (i.e., LiveGraph) by up to 4.4×.",
    "link": "https://www.usenix.org/conference/atc23/presentation/shen",
    "session_title": "Structuring Graphs",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "b82ea300-aabf-4c3a-8832-652124066ece"
  },
  {
    "title": "Comosum: An Extensible, Reconfigurable, and Fault-Tolerant IoT Platform for Digital Agriculture",
    "authors": "Gloire Rubambiza, Shiang-Wan Chin, Mueed Rehman, Sachille Atapattu, José F. Martínez, and Hakim Weatherspoon,Cornell University",
    "abstract": "This work is an experience with a deployed networked system for digital agriculture (or DA). DA is the use of data-driven techniques toward a sustainable increase in farm productivity and efficiency. DA systems are expected to be overlaid on existing rural infrastructures, which are known to be less robust than urban infrastructures. While existing DA approaches partially address several infrastructure issues, challenges related to data aggregation, data analytics, and fault tolerance remain open. In this work, we present the design of Comosum, an extensible, reconfigurable, and fault-tolerant architecture of hardware, software, and distributed cloud abstractions to sense, analyze, and actuate on different farm types. We also present FarmBIOS, an implementation of the Comosum architecture. We analyze FarmBIOS by leveraging various applications, deployment experiences, and network differences between urban and rural farms. This includes, for instance, an edge analytics application achieving 86% accuracy in vineyard disease detection. An eighteen-month deployment of FarmBIOS highlights Comosum's tolerance to intermittent network outages that lasted for several days during many periods of the deployment. We offer practical insights on how FarmBIOS adapts to new DA vendors, reconfigurability challenges in the cloud, persistent failures that are unique to the DA context, and the system's current limitations.",
    "link": "https://www.usenix.org/conference/atc23/presentation/rubambiza",
    "session_title": "Placement and Fault Tolerance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "8589262c-8dc7-42c4-8c82-f5c6da1ed4e5"
  },
  {
    "title": "Oakestra: A Lightweight Hierarchical Orchestration Framework for Edge Computing",
    "authors": "Giovanni Bartolomeo, Mehdi Yosofie, Simon Bäurle, Oliver Haluszczynski, Nitinder Mohan, and Jörg Ott,Technical University of Munich, Germany",
    "abstract": "Edge computing seeks to enable applications with strict latency requirements by utilizing resources deployed in diverse, dynamic, and possibly constrained environments closer to the users. Existing state-of-the-art orchestration frameworks (e.g. Kubernetes) perform poorly at the edge since they were designed for reliable, low latency, high bandwidth cloud environments.  We present Oakestra, a hierarchical, lightweight, flexible, and scalable orchestration framework for edge computing. Through its novel federated three-tier resource management, delegated task scheduling, and semantic overlay networking, Oakestra can flexibly consolidate multiple infrastructure providers and support applications over dynamic variations at the edge.  Our comprehensive evaluation against the state-of-the-art  demonstrates the significant benefits of Oakestra as it achieves approximately tenfold reduction in resource usage through reduced management overhead and 10% application performance improvement due to lightweight operation over constrained hardware.",
    "link": "https://www.usenix.org/conference/atc23/presentation/bartolomeo",
    "session_title": "Placement and Fault Tolerance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "b6773380-284c-4e73-8e70-8e26796febee"
  },
  {
    "title": "Explore Data Placement Algorithm for Balanced Recovery Load Distribution",
    "authors": "Yingdi Shan,Zhongguancun Laboratory and Tsinghua University;Kang Chen and Yongwei Wu,Tsinghua University",
    "abstract": "In distributed storage systems, the ability to recover from failures is critical for ensuring reliability. To improve recovery speed, these systems often distribute the recovery task across multiple disks and recover data units in parallel. However, the use of fine-grained data units for better load balancing can increase the risk of data loss.\nThis paper systematically analyzes the recovery load distribution problem and proposes a new data placement algorithm that can achieve load balancing without employing fine-grained data units. The problem of finding an optimal data placement for recovery load balancing is formally defined and shown to be NP-hard. A greedy data placement algorithm is presented, and experimental results demonstrate its superior performance compared to conventional techniques, with up to 2.4 times faster recovery. Furthermore, the algorithm supports low-overhead system expansion.",
    "link": "https://www.usenix.org/conference/atc23/presentation/shan",
    "session_title": "Placement and Fault Tolerance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "8df5e521-da6c-4f79-9775-2d73c9655ef9"
  },
  {
    "title": "Luci: Loader-based Dynamic Software Updates for Off-the-shelf Shared Objects",
    "authors": "Bernhard Heinloth, Peter Wägemann, and Wolfgang Schröder-Preikschat,Friedrich-Alexander-Universität Erlangen-Nürnberg (FAU), Germany",
    "abstract": "Shared libraries indisputably facilitate software development but also significantly increase the attack surface, and when using multiple libraries, frequent patches for vulnerabilities are to be expected. However, such a bugfix commonly requires restarting all services depending on the compromised library, which causes downtimes and unavailability of services. This can be prevented by dynamic software updating, but existing approaches are often costly and incur additional maintenance due to necessary source or infrastructure modifications.\nWith Luci, we present a lightweight linker/loader technique to unobtrusively and automatically update shared libraries during runtime by exploiting the indirection mechanisms of position-independent code, hence avoiding severe runtime overhead. Luci further adds no additional requirements, such as adjusting the source or interfering with the build chain, as it fully adapts to today's build and package-update mechanisms of common Linux distributions. We demonstrate our approach on popular libraries (like Expat and libxcrypt) using off-the-shelf (i.e., unmodified) binaries from Debian and Ubuntu packages, being able to update the majority of releases without the necessity of a process restart.",
    "link": "https://www.usenix.org/conference/atc23/presentation/heinloth",
    "session_title": "Updating Code",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "826829d9-39af-4feb-9595-d24172dbbacb"
  },
  {
    "title": "MELF: Multivariant Executables for a Heterogeneous World",
    "authors": "Dominik Töllner,Leibniz Universität Hannover;Christian Dietrich,Hamburg University of Technology;Illia Ostapyshyn, Florian Rommel, and Daniel Lohmann,Leibniz Universität Hannover",
    "abstract": "Compilers today provide a plethora of options to optimize and instrument the code for specific processor extensions, safety features and compatibility settings. Application programmers often provide further instrumented variants of their code for similar purposes, controlled again at compiletime by means of preprocessor macros and dead-code elimination. However, the global once-for-all character of compile-time decisions regarding performance-, debugging-, and safety/security-critical features limits their usefulness in heterogeneous execution settings, where available processor features or security requirements may evolve over time or even differ on a per-client level. Our Multivariant ELF (MELF) approach makes it possible to provide multiple per-function compile-time variants within the same binary and flexibly switch between them at run-time, optionally on a per-thread granularity. As MELFs are implemented on binary level (linker, loader), they do not depend on specific language features or compilers and can be easily applied to existing projects. In our case studies with SQLite, memcached, MariaDB and a benchmark for heterogeneous architectures with overlapping ISAs, we show how MELFs can be employed to provide per-client performance isolation of expensive compile time security or debugging features and adapt to extended instruction sets, when they are actually available.",
    "link": "https://www.usenix.org/conference/atc23/presentation/tollner",
    "session_title": "Updating Code",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "b722d64d-a786-4bd6-aefe-d7ac32b25f7b"
  },
  {
    "title": "APRON: Authenticated and Progressive System Image Renovation",
    "authors": "Sangho Lee,Microsoft Research",
    "abstract": "The integrity and availability of an operating system are important to securely use a computing device.  Conventional schemes focus on how to prevent adversaries from corrupting the operating system or how to detect such corruption.  However, how to recover the device from such corruption securely and efficiently is overlooked, resulting in lengthy system downtime with integrity violation and unavailability.\nIn this paper, we propose APRON, a novel scheme to renovate a corrupt or outdated operating system image securely and progressively. APRON concurrently and selectively repairs any invalid blocks on demand during and after the system boot, effectively minimizing the system downtime needed for a recovery.  APRON verifies whether requested blocks are valid in the kernel using a signed Merkle hash tree computed over the valid, up-to-date system image.  If they are invalid, it fetches corresponding blocks from a reliable source, verifies them, and replaces the requested blocks with the fetched ones. Once the system boots up, APRON runs a background thread to eventually renovate any other non-requested invalid blocks.  Our evaluation shows that APRON has short downtime: it outperforms conventional recovery mechanisms by up to 28x.  It runs real-world applications with an average runtime overhead of 9% during the renovation and with negligible overhead (0.01%) once the renovation is completed.",
    "link": "https://www.usenix.org/conference/atc23/presentation/lee",
    "session_title": "Updating Code",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "b3e5760d-0c60-4948-b445-253b4719b3f8"
  },
  {
    "title": "zpoline: a system call hook mechanism based on binary rewriting",
    "authors": "Kenichi Yasukata, Hajime Tazaki, and Pierre-Louis Aublin,IIJ Research Laboratory;Kenta Ishiguro,Hosei University",
    "abstract": "This paper presents zpoline, a system call hook mechanism for x86-64 CPUs. zpoline employs binary rewriting and offers seven advantages: 1) low hook overhead, 2) exhaustive hooking, 3) it does not overwrite instructions that should not be modified, 4) no kernel change and no additional kernel module are needed, 5) source code of the user-space program is not required, 6) it does not rely on specially-modified standard libraries, and 7) it can be used for system call emulation. None of previous mechanisms achieve them simultaneously.\nThe main challenge, this work addresses, is that it is hard to replace syscall/sysenter with jmp/call for jumping to an arbitrary hook function because syscall and sysenter are two-byte instructions, and usually more bytes are required to specify an arbitrary hook function address.\nzpoline resolves this issue with a novel binary rewriting strategy and special trampoline code; in a nutshell, it replaces syscall/sysenter with a two-byte callq *%rax instruction and instantiates the trampoline code at virtual address 0. We confirmed zpoline is functional on the major UNIX-like systems: Linux, FreeBSD, NetBSD, and DragonFly BSD. Our experiments show that zpoline achieves 28.1~761.0 times lower overhead compared to existing mechanisms which ensure exhaustive hooking without overwriting instructions supposed not to be modified, and Redis and a user-space network stack bonded by zpoline experience only a 5.2% performance reduction compared to the minimum overhead case while the existing mechanisms degrade 72.3~98.8% of performance.",
    "link": "https://www.usenix.org/conference/atc23/presentation/yasukata",
    "session_title": "Updating Code",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "684cf7db-12e2-42f4-869d-a97a0f14330f"
  },
  {
    "title": "Sponge: Fast Reactive Scaling for Stream Processing with Serverless Frameworks",
    "authors": "Won Wook Song,Seoul National University;Taegeon Um,Samsung Research;Sameh Elnikety,Microsoft Research;Myeongjae Jeon,UNIST;Byung-Gon Chun,Seoul National University and FriendliAI",
    "abstract": "Streaming workloads deal with data that is generated in real-time. This data is often unpredictable and changes rapidly in volume. To deal with these fluctuations, current systems aim to dynamically scale in and out, redistribute, and migrate computing tasks across a cluster of machines. While many prior works have focused on reducing the overhead of system reconfiguration and state migration on pre-allocated cluster resources, these approaches still face significant challenges in meeting latency SLOs at low operational costs, especially upon facing unpredictable bursty loads.\nIn this paper, we propose Sponge, a new stream processing system that enables fast reactive scaling of long-running stream queries by leveraging serverless framework (SF) instances. Sponge absorbs sudden, unpredictable increases in input loads from existing VMs with low latency and cost by taking advantage of the fact that SF instances can be initiated quickly, in just a few hundred milliseconds. Sponge efficiently tracks a small number of metrics to quickly detect bursty loads and make fast scaling decisions based on these metrics. Moreover, by incorporating optimization logic at compile-time and triggering fast data redirection and partial-state merging mechanisms at runtime, Sponge avoids optimization and state migration overheads during runtime while efficiently offloading bursty loads from existing VMs to new SF instances. Our evaluation on AWS EC2 and Lambda using the NEXMark benchmark shows that Sponge promptly reacts to bursty input loads, reducing 99th-percentile tail latencies by 88% on average compared to other stream query scaling methods on VMs. Sponge also reduces cost by 83% compared to methods that over-provision VMs to handle unpredictable bursty loads.",
    "link": "https://www.usenix.org/conference/atc23/presentation/song",
    "session_title": "Serverless",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "c24a1d55-0edd-4ab1-81e9-c2c3910bbe74"
  },
  {
    "title": "On-demand Container Loading in AWS Lambda",
    "authors": "Marc Brooker, Mike Danilov, Chris Greenwood, and Phil Piwonka,Amazon Web Services",
    "abstract": "AWS Lambda is a serverless event-driven compute service, part of a category of cloud compute offerings sometimes called Function-as-a-service (FaaS). When we first released AWS Lambda, functions were limited to 250MB of code and dependencies, packaged as a simple compressed archive. In 2020, we released support for deploying container images as large as 10GiB as Lambda functions, allowing customers to bring much larger code bases and sets of dependencies to Lambda. Supporting larger packages, while still meeting Lambda’s goals of rapid scale (adding up to 15,000 new containers per second for a single customer, and much more in aggregate), high request rate (millions of requests per second), high scale (millions of unique workloads), and low start-up times (as low as 50ms) presented a significant challenge.\nWe describe the storage and caching system we built, optimized for delivering container images on-demand, and our experiences designing, building, and operating it at scale. We focus on challenges around security, efficiency, latency, and cost, and how we addressed these challenges in a system that combines caching, deduplication, convergent encryption, erasure coding, and block-level demand loading.\nSince building this system, it has reliably processed hundreds of trillions of Lambda invocations for over a million AWS customers, and has shown excellent resilience to load and infrastructure failures.",
    "link": "https://www.usenix.org/conference/atc23/presentation/brooker",
    "session_title": "Serverless",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "2fba8862-04cd-48b8-9ad6-a75050889a8d"
  },
  {
    "title": "Decentralized and Stateful Serverless Computing on the Internet Computer Blockchain",
    "authors": "Maksym Arutyunyan, Andriy Berestovskyy, Adam Bratschi-Kaye, Ulan Degenbaev, Manu Drijvers, Islam El-Ashi, Stefan Kaestle, Roman Kashitsyn, Maciej Kot, Yvonne-Anne Pignolet, Rostislav Rumenov, Dimitris Sarlis, Alin Sinpalean, Alexandru Uta, Bogdan Warinschi, and Alexandra Zapuc,DFINITY, Zurich",
    "abstract": "The Internet Computer (IC) is a fast and efficient decentralized blockchain-based platform for the execution of general-purpose applications in the form of smart contracts. In other words, the IC service is the antithesis of current serverless computing. Instead of ephemeral, stateless functions operated by a single entity, the IC offers decentralized stateful serverless computation over untrusted, independent datacenters. Developers deploy stateful canisters that serve calls either to end-users or other canisters. The IC programming model is similar to serverless clouds, with applications written in modern languages such as Rust or Python, yet simpler: state is maintained automatically, without developer intervention.\nIn this paper, we identify and address significant systems challenges to enable efficient decentralized stateful serverless computation: scalability, stateful execution through orthogonal persistence, and deterministic scheduling. We describe the design of the IC and characterize its operational data gathered over the past 1.5 years, and its performance.",
    "link": "https://www.usenix.org/conference/atc23/presentation/arutyunyan",
    "session_title": "Serverless",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "2159dedb-ba97-42c9-865a-bbc3613e6706"
  },
  {
    "title": "Pinolo: Detecting Logical Bugs in Database Management Systems with Approximate Query Synthesis",
    "authors": "Zongyin Hao and Quanfeng Huang,School of Informatics, Xiamen University;Chengpeng Wang,The Hong Kong University of Science and Technology;Jianfeng Wang,University of Southern California;Yushan Zhang,Tencent Inc.;Rongxin Wu,School of Informatics, Xiamen University;Charles Zhang,The Hong Kong University of Science and Technology",
    "abstract": "DBMSs (Database Management Systems) are essential in modern enterprise software. Thus, ensuring the correctness of DBMSs is critical for enterprise applications. Among various kinds of bugs, logical bugs, which make a DBMS return an incorrect result set for a given SQL query, are the most challenging for detection since they typically do not result in apparent manifestations (e.g., crashes) and are likely to go unnoticed by users. The key challenge of detecting logical bugs is the test oracle problem, i.e., how to automatically characterize the expected results for a given query. The state-of-theart approaches focus on generating the equivalent forms of queries via the customized rules, which rewrite a seed query to achieve the equivalent transformation. This dramatically limits the forms of SQL queries fed to the DBMS and thus leads to the under-reporting of many deeply-hidden logical bugs. In this paper, we propose a novel approach, PINOLO, to constructing a test oracle for logical bugs. Instead of generating the equivalent mutants of a seed query, our idea is to synthesize the queries that theoretically should return a superset or a subset of the result set of the seed query, forming the over-approximations or under-approximations of the seed query. A logical bug is detected if the result set returned by our synthesized query does not follow the expected approximation relation. We implemented our idea as a DBMS testing system and evaluated it on four widely-used DBMSs: MySQL, MariaDB, TiDB, and OceanBase. By the time of writing, PINOLO has found 41 unique logical bugs in these DBMSs, 39 of which have been confirmed by developers.",
    "link": "https://www.usenix.org/conference/atc23/presentation/hao",
    "session_title": "Troubleshooting and Measurement",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "424b8395-5608-49d8-8743-31713ebdc87b"
  },
  {
    "title": "AutoARTS: Taxonomy, Insights and Tools for Root Cause Labelling of Incidents in Microsoft Azure",
    "authors": "Pradeep Dogga,UCLA;Chetan Bansal, Richard Costleigh, Gopinath Jayagopal, Suman Nath, and Xuchao Zhang,Microsoft",
    "abstract": "Labelling incident postmortems with the root causes is essential for aggregate analysis, which can reveal common problem areas, trends, patterns, and risks that may cause future incidents. A common practice is to manually label postmortems with a single root cause based on an ad hoc taxonomy of root cause tags. However, this manual process is error-prone, a single root cause is inadequate to capture all contributing factors behind an incident, and ad hoc taxonomies do not reflect the diverse categories of root causes.\nIn this paper, we address this problem with a three-pronged approach. First, we conduct an extensive multi-year analysis of over 2000 incidents from more than 450 services in Microsoft Azure to understand all the factors that contributed to the incidents. Second, based on the empirical study, we propose a novel hierarchical and comprehensive taxonomy of potential contributing factors for production incidents. Lastly, we develop an automated tool that can assist humans in the labelling process. We present empirical evaluation and a user study that show the effectiveness of our approach. To the best of our knowledge, this is the largest and most comprehensive study of production incident postmortem reports yet. We also make our taxonomy publicly available.",
    "link": "https://www.usenix.org/conference/atc23/presentation/dogga",
    "session_title": "Troubleshooting and Measurement",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "bb8337f7-c306-4789-b1d7-4acf2408a6c7"
  },
  {
    "title": "Avoiding the Ordering Trap in Systems Performance Measurement",
    "authors": "Dmitry Duplyakin and Nikhil Ramesh,University of Utah;Carina Imburgia,University of Washington;Hamza Fathallah Al Sheikh, Semil Jain, Prikshit Tekta, Aleksander Maricq, Gary Wong, and Robert Ricci,University of Utah",
    "abstract": "It is common for performance studies of computer systems to make the assumption-either explicitly or implicitly-that results from each trial are independent. One place this assumption manifests is in experiment design, specifically in the order in which trials are run: if trials do not affect each other, the order in which they are run is unimportant. If, however, the execution of one trial does affect system state in ways that alter the results of future trials, this assumption does not hold, and ordering must be taken into account in experiment design. In the simplest example, if all trials with system setting A are run before all trials with setting B, this can systematically bias experiment results leading to the incorrect conclusion that \"A is better than B\" or vice versa.\nIn this paper, we: (a) explore, via a literature and artifact survey, whether experiment ordering is taken in to consideration at top computer systems conferences; (b) devise a methodology for studying the effects of ordering on performance experiments, including statistical tests for order dependence; and (c) conduct the largest-scale empirical study to date on experiment ordering, using a dataset we collected over 9 months comprising nearly 2.3M measurements from over 1,700 servers. Our analysis shows that ordering effects are a hidden but dangerous trap that published performance experiments are not typically designed to avoid. We describe OrderSage, a tool that we have built to help detect and mitigate these effects, and use it on a number of case studies, including finding previously unknown ordering effects in an artifact from a published paper.",
    "link": "https://www.usenix.org/conference/atc23/presentation/duplyakin",
    "session_title": "Troubleshooting and Measurement",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "04f544cd-4858-44e2-a2b6-b7427d654fcb"
  },
  {
    "title": "AWARE: Automate Workload Autoscaling with Reinforcement Learning in Production Cloud Systems",
    "authors": "Haoran Qiu and Weichao Mao,University of Illinois at Urbana-Champaign;Chen Wang, Hubertus Franke, and Alaa Youssef,IBM Research;Zbigniew T. Kalbarczyk, Tamer Başar, and Ravishankar K. Iyer,University of Illinois at Urbana-Champaign",
    "abstract": "Workload autoscaling is widely used in public and private cloud systems to maintain stable service performance and save resources. However, it remains challenging to set the optimal resource limits and dynamically scale each workload at runtime. Reinforcement learning (RL) has recently been proposed and applied in various systems tasks, including resource management. In this paper, we first characterize the state-of-the-art RL approaches for workload autoscaling in a public cloud and point out that there is still a large gap in taking the RL advances to production systems. We then propose AWARE, an extensible framework for deploying and managing RL-based agents in production systems. AWARE leverages meta-learning and bootstrapping to (a) automatically and quickly adapt to different workloads, and (b) provide safe and robust RL exploration. AWARE provides a common OpenAI Gym-like RL interface to agent developers for easy integration with different systems tasks. We illustrate the use of AWARE in the case of workload autoscaling. Our experiments show that AWARE adapts a learned autoscaling policy to new workloads 5.5x faster than the existing transfer-learning-based approach and provides stable online policy-serving performance with less than 3.6% reward degradation. With bootstrapping, AWARE helps achieve 47.5% and 39.2% higher CPU and memory utilization while reducing SLO violations by a factor of 16.9x during policy training.",
    "link": "https://www.usenix.org/conference/atc23/presentation/qiu-haoran",
    "session_title": "Cloud and Microservices",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "17d8b782-98da-4212-9f33-7ec97f35c600"
  },
  {
    "title": "Nodens: Enabling Resource Efficient and Fast QoS Recovery of Dynamic Microservice Applications in Datacenters",
    "authors": "Jiuchen Shi, Hang Zhang, Zhixin Tong, Quan Chen, Kaihua Fu, and Minyi Guo,Department of Computer Science and Engineering, Shanghai Jiao Tong University",
    "abstract": "Current microservice applications always meet with load and call graph dynamics. These dynamics can easily lead to inappropriate resource allocation for microservices, and further lead to Quality-of-Service (QoS) violations of applications. However, current microservice management works are incapable to handle these dynamics, mainly due to the execution blocking effect among microservices. We therefore propose Nodens, a runtime system that enables fast QoS recovery of the dynamic microservice application, while maintaining the efficiency of the resource usage. Nodens comprises a traffic-based load monitor, a blocking-aware load updater, and a resource-efficient query drainer. The load monitor periodically checks microservices' network bandwidth usage and predicts the monitored loads based on it. The load updater updates the actual \"to-be-processed\" load of each microservice to enable fast resource adjustment. The query drainer allocates just-enough excessive resources for microservices to drain the queued queries, which can ensure the QoS recovery time target. Our experiments show that Nodens can reduce the QoS recovery time by 12.1X with only the excessive resource usage of 6.1% on average, compared to the state-of-the-art microservice management systems.",
    "link": "https://www.usenix.org/conference/atc23/presentation/shi",
    "session_title": "Cloud and Microservices",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "e014927e-5864-4c0c-9cbe-9ab5c06f0674"
  },
  {
    "title": "Lifting the veil on Meta’s microservice architecture: Analyses of topology and request workflows",
    "authors": "Darby Huye,Tufts University, Meta;Yuri Shkuro,Meta;Raja R. Sambasivan,Tufts University",
    "abstract": "The microservice architecture is a novel paradigm for building and operating distributed applications in many organizations. This paradigm changes many aspects of how distributed applications are built, managed, and operated in contrast to monolithic applications. It introduces new challenges to solve and requires changing assumptions about previously well-known ones. But, today, the characteristics of large-scale microservice architectures are invisible outside their organizations, depressing opportunities for research. Recent studies provide only partial glimpses and represent only single design points. This paper enriches our understanding of large-scale microservices by characterizing Meta’s microservice architecture. It focuses on previously unreported (or underreported) aspects important to developing and researching tools that use the microservice topology or traces of request workflows. We find that the topology is extremely heterogeneous, is in constant flux, and includes software entities that do not cleanly fit in the microservice architecture. Request workflows are highly dynamic, but local properties can be predicted using service and endpoint names. We quantify the impact of obfuscating factors in microservice measurement and conclude with implications for tools and future-work opportunities.",
    "link": "https://www.usenix.org/conference/atc23/presentation/huye",
    "session_title": "Cloud and Microservices",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "cbe2774f-a548-4749-a5b1-233d4d8f0d12"
  },
  {
    "title": "Tectonic-Shift: A Composite Storage Fabric for Large-Scale ML Training",
    "authors": "Mark Zhao,Stanford University and Meta;Satadru Pan, Niket Agarwal, Zhaoduo Wen, David Xu, Anand Natarajan, Pavan Kumar, Shiva Shankar P, Ritesh Tijoriwala, Karan Asher, Hao Wu, Aarti Basant, Daniel Ford, Delia David, Nezih Yigitbasi, Pratap Singh, and Carole-Jean Wu,Meta;Christos Kozyrakis,Stanford University",
    "abstract": "Tectonic-Shift is the storage fabric for Meta’s production machine learning (ML) training infrastructure. Industrial storage fabrics for ML need to meet both the intensive IO and high-capacity storage demands of training jobs. Our prior storage fabric, Tectonic, used hard disk drives (HDDs) to store training data. However, HDDs provide poor IO-per-watt performance. This inefficiency hindered the scalability of our storage fabric, and thus limited our ability to keep pace with rapidly growing training IO demands.\nThis paper describes our journey to build and deploy Tectonic-Shift, a composite storage fabric that efficiently serves the needs of our training infrastructure. We begin with a deep workload characterization that guided an extensive hardware and software design space exploration. We then present the principled design of Tectonic-Shift, which maximizes storage power efficiency by combining Shift, a flash storage tier, with Tectonic. Shift improves efficiency by absorbing reads using IO-efficient flash, reducing required HDD capacity. Shift maximizes IO absorption via novel application-aware cache policies that infer future access patterns from training dataset specifications. Shift absorbs 1.51-3.28x more IO than an LRU flash cache and reduces power demand in a petabyte-scale production Tectonic-Shift cluster by 29%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhao",
    "session_title": "Distributed Storage",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "480ca82a-9d0e-4588-bca2-ec86728ae328"
  },
  {
    "title": "Calcspar: A Contract-Aware LSM Store for Cloud Storage with Low Latency Spikes",
    "authors": "Yuanhui Zhou and Jian Zhou,WNLO, Huazhong University of Science and Technology, Wuhan, Hubei, China;Shuning Chen,PingCAP, China;Peng Xu,Research Center for Graph Computing, Zhejiang Lab, Hangzhou, Zhejiang, China;Peng Wu,WNLO, Huazhong University of Science and Technology, Wuhan, Hubei, China;Yanguang Wang and Xian Liu,PingCAP, China;Ling Zhan,Division of Information Science and Technology, Wenhua University, Wuhan, China;Jiguang Wan,WNLO, Huazhong University of Science and Technology, Wuhan, Hubei, China",
    "abstract": "Cloud storage is gaining popularity because of features such as pay-as-you-go that significantly reduces storage costs. However, the community has not sufficiently explored its contract model and latency characteristics. As LSM-Tree-based key-value stores (LSM stores) become the building block for numerous cloud applications, how cloud storage would impact the performance of key-value accesses is vital. This study reveals the significant latency variances of Amazon Elastic Block Store (EBS) under various I/O pressures, which challenges LSM store read performance on cloud storage. To reduce the corresponding tail latency, we propose Calcspar, a contract-aware LSM store for cloud storage, which efficiently addresses the challenges by regulating the rate of I/O requests to cloud storage and absorbing surplus I/O requests with the data cache. We specifically developed a fluctuation-aware cache to lower the high latency brought on by workload fluctuations. Additionally, we build a congestion-aware IOPS allocator to reduce the impact of LSM store internal operations on read latency. We evaluated Calcspar on EBS with different real-world workloads and compared it to the cutting-edge LSM stores. The results show that Calcspar can significantly reduce tail latency while maintaining regular read and write performance, keeping the 99th percentile latency under 550μs and reducing average latency by 66%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhou",
    "session_title": "Distributed Storage",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "de85999e-d44c-473b-b8b1-66d541fa486e"
  },
  {
    "title": "Adaptive Online Cache Capacity Optimization via Lightweight Working Set Size Estimation at Scale",
    "authors": "Rong Gu, Simian Li, Haipeng Dai, Hancheng Wang, and Yili Luo,State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing 210023, China;Bin Fan,Alluxio Inc;Ran Ben Basat,University College London;Ke Wang,Meta Inc;Zhenyu Song,Princeton University;Shouwei Chen and Beinan Wang,Alluxio Inc;Yihua Huang and Guihai Chen,State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing 210023, China",
    "abstract": "Big data applications extensively use cache techniques to accelerate data access. A key challenge for improving cache utilization is provisioning a suitable cache size to fit the dynamic working set size (WSS) and understanding the related item repetition ratio (IRR) of the trace. We propose Cuki, an approximate data structure for efficiently estimating online WSS and IRR for variable-size item access with proven accuracy guarantee. Our solution is cache-friendly, thread-safe, and light-weighted in design. Based on that, we design an adaptive online cache capacity tuning mechanism. Moreover, Cuki can also be adapted to accurately estimate the cache miss ratio curve (MRC) online. We built Cuki as a lightweight plugin of the widely-used distributed file caching system Alluxio. Evaluation results show that Cuki has higher accuracy than four state-of-the-art algorithms by over an order of magnitude and with better stability in performance. The end-to-end data access experiments show that the adaptive cache tuning framework using Cuki reduces the table querying latency by 79% and improves the file reading throughput by 29% on average. Compared with the cutting-edge MRC approach, Cuki uses less memory and improves accuracy by around 73% on average. Cuki is deployed on one of the world’s largest social platforms to run the Presto query workloads.",
    "link": "https://www.usenix.org/conference/atc23/presentation/gu",
    "session_title": "Distributed Storage",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "aeb3a429-a508-4133-9d9d-7ab37a8a9e77"
  },
  {
    "title": "SAGE: Software-based Attestation for GPU Execution",
    "authors": "Andrei Ivanov and Benjamin Rothenberger,ETH Zürich;Arnaud Dethise and Marco Canini,KAUST;Torsten Hoefler and Adrian Perrig,ETH Zürich",
    "abstract": "With the application of machine learning to security-critical and sensitive domains, there is a growing need for integrity and privacy in computation using accelerators, such as GPUs. Unfortunately, the support for trusted execution on GPUs is currently very limited -- trusted execution on accelerators is particularly challenging since the attestation mechanism should not reduce performance.\nAlthough hardware support for trusted execution on GPUs is emerging, we study purely software-based approaches for trusted GPU execution. A software-only approach offers distinct advantages: (1) complement hardware-based approaches, enhancing security especially when vulnerabilities in the hardware implementation degrade security, (2) operate on GPUs without hardware support for trusted execution, and (3) achieve security without reliance on secrets embedded in the hardware, which can be extracted as history has shown.\nIn this work, we present SAGE, a software-based attestation mechanism for GPU execution. SAGE enables secure code execution on NVIDIA GPUs of the Ampere architecture (A100), providing\nproperties of code integrity and secrecy, computation integrity, as well as data integrity and secrecy -- all in the presence of malicious code running on the GPU and CPU. Our evaluation demonstrates that SAGE is already practical today for executing code in a trustworthy way on GPUs without specific hardware support.",
    "link": "https://www.usenix.org/conference/atc23/presentation/ivanov",
    "session_title": "Hardware and Software for Security and Performance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "918f4a2f-4571-4fda-910b-cdae6e761cca"
  },
  {
    "title": "Confidential Computing within an AI Accelerator",
    "authors": "Kapil Vaswani, Stavros Volos, Cédric Fournet, Antonio Nino Diaz, and Ken Gordon,Microsoft;Balaji Vembu,Meta;Sam Webster and David Chisnall,Microsoft;Saurabh Kulkarni,Lucata Systems;Graham Cunningham,XTX Markets;Richard Osborne,Graphcore;Daniel Wilkinson,Imagination Technologies",
    "abstract": "We present IPU Trusted Extensions (ITX), a set of hardware extensions that enables trusted execution environments in Graphcore’s AI accelerators. ITX enables the execution of AI workloads with strong confidentiality and integrity guarantees at low performance overheads. ITX isolates workloads from untrusted hosts, and ensures their data and models remain encrypted at all times except within the accelerator’s chip. ITX includes a hardware root-of-trust that provides attestation capabilities and orchestrates trusted execution, and on-chip programmable cryptographic engines for authenticated encryption of code/data at PCIe bandwidth.\nWe also present software for ITX in the form of compiler and runtime extensions that support multi-party training without requiring a CPU-based TEE.\nWe included experimental support for ITX in Graphcore’s GC200 IPU taped out at TSMC’s 7nm node. Its evaluation on a development board using standard DNN training workloads suggests that ITX adds < 5% performance overhead and delivers up to 17x better performance compared to CPU-based confidential computing systems based on AMD SEV-SNP.",
    "link": "https://www.usenix.org/conference/atc23/presentation/vaswani",
    "session_title": "Hardware and Software for Security and Performance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "70fd7b55-f933-4bcd-9356-d353f480eb12"
  },
  {
    "title": "Arbitor: A Numerically Accurate Hardware Emulation Tool for DNN Accelerators",
    "authors": "Chenhao Jiang and Anand Jayarajan,University of Toronto and Vector Institute;Hao Lu,University of Toronto;Gennady Pekhimenko,University of Toronto and Vector Institute",
    "abstract": "Recently there has been considerable attention on designing and developing hardware accelerators for deep neural network (DNN) training workloads. However, designing DNN accelerators is often challenging as many commonly used hardware optimization strategies can potentially impact the final accuracy of the models. In this work, we propose a hardware emulation tool called Arbitor for empirically evaluating DNN accelerator designs and accurately estimating their effects on DNN accuracy. Arbitor takes advantage of modern machine learning compilers to enable fast prototyping and numerically accurate emulation of common DNN optimizations like low-precision arithmetic, approximate computing, and sparsity-aware processing on general-purpose GPUs. Subsequently, we use Arbitor to conduct an extensive sensitivity study to understand the effects of these optimizations on popular models such as ResNet, Transformers, Recurrent-CNN, and GNNs. Based on our analysis, we observe that DNN models can tolerate arithmetic operations with much lower precision than the commonly used numerical formats support. We also demonstrate that piece-wise approximation is effective in handling complex non-linear operations in DNN models without affecting their accuracy. Finally, enforcing a high degree of structured sparsity in the parameters and gradients can significantly affect the accuracy of the models.",
    "link": "https://www.usenix.org/conference/atc23/presentation/jiang-chenhao",
    "session_title": "Hardware and Software for Security and Performance",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "81cabd50-ce1b-4f9e-b65f-8ead5dd2bbf8"
  },
  {
    "title": "oBBR: Optimize Retransmissions of BBR Flows on the Internet",
    "authors": "Pengqiang Bi, Mengbai Xiao, Dongxiao Yu, and Guanghui Zhang,Shandong University;Jian Tong, Jingchao Liu, and Yijun Li,BaishanCloud",
    "abstract": "BBR is a model-based congestion control algorithm that has been widely adopted on the Internet. Different from loss-based algorithms, BBR features high throughput since it characterizes the underlying link and sends data accordingly. However, BBR suffers from high retransmission rates in deployment, leading to extra bandwidth costs. In this work, we carefully analyze and validate the reasons for high retransmissions in BBR flows. In a shallow-buffered link, the packet losses are deeply correlated to both the bottleneck buffer size and the in-flight data cap. Additionally, bandwidth drops also cause unwanted retransmissions. Based on the analysis, we design and implement oBBR, which aims at optimizing the retransmissions in BBR flows. In oBBR, we adaptively scale the in-flight data cap and update the bandwidth estimate timely so that few excessive data are injected into the network, avoiding packet losses. Our Internet experiments show that oBBR achieves 1.54× higher goodput than BBRv2 and 39.48% fewer retransmissions than BBR-S, which are both BBR variants with improved transmission performance. When deploying BBR in Internet streaming sessions, oBBR obtains greater QoE than BBRv2 and BBR-S without incurring more retransmissions. To summarize, oBBR is designed to help a transmission session reach high goodput and low retransmissions simultaneously, while other CCAs only achieve one of them.",
    "link": "https://www.usenix.org/conference/atc23/presentation/bi",
    "session_title": "Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "dc8cf65c-778b-47f6-947e-e155c0e44d78"
  },
  {
    "title": "Bridging the Gap between QoE and QoS in Congestion Control: A Large-scale Mobile Web Service Perspective",
    "authors": "Jia Zhang,Tsinghua University, Zhongguancun Laboratory, Beijing National Research Center for Information Science and Technology;Yixuan Zhang,Tsinghua University, Beijing National Research Center for Information Science and Technology;Enhuan Dong,Tsinghua University, Quan Cheng Laboratory, Beijing National Research Center for Information Science and Technology;Yan Zhang, Shaorui Ren, and Zili Meng,Tsinghua University, Beijing National Research Center for Information Science and Technology;Mingwei Xu,Tsinghua University, Quan Cheng Laboratory, Beijing National Research Center for Information Science and Technology;Xiaotian Li, Zongzhi Hou, and Zhicheng Yang,Meituan Inc.;Xiaoming Fu,University of Goettingen",
    "abstract": "To improve the user experience of mobile web services, various congestion control algorithms (CCAs) have been proposed, yet the performance of the application is still unsatisfactory. We argue that the suboptimal performance comes from the gap between what the application needs (i.e., Quality of Experience (QoE)) and what the current CCA is optimizing (i.e., Quality of Service (QoS)). However, optimizing QoE for CCAs is extremely challenging due to the convoluted relationship and mismatched timescale between QoE and QoS. To bridge the gap between QoE and QoS for CCAs, we propose Floo, a new QoE-oriented congestion control selection mechanism, as a shim layer between CCAs and applications to address the challenges above. Floo targets request completion time as QoE, and conveys the optimization goal of QoE to CCAs by always selecting the most appropriate CCA in the runtime. Floo further adopts reinforcement learning to capture the complexity in CCA selection and supports smooth CCA switching during transmission. We implement Floo in a popular mobile web service application online. Through extensive experiments in production environments and on various locally emulated network conditions,  we demonstrate that Floo improves QoE by about 14.3% to 52.7%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhang-jia",
    "session_title": "Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "7c49b203-a6fd-4247-9dc5-8e0664f1863a"
  },
  {
    "title": "FarReach: Write-back Caching in Programmable Switches",
    "authors": "Siyuan Sheng and Huancheng Puyang,The Chinese University of Hong Kong;Qun Huang,Peking University;Lu Tang,Xiamen University;Patrick P. C. Lee,The Chinese University of Hong Kong",
    "abstract": "Skewed write-intensive key-value storage workloads are increasingly observed in modern data centers, yet they also incur server overloads due to load imbalance. Programmable switches provide viable solutions for realizing load-balanced caching on the I/O path, and hence implementing write-back caching in programmable switches is a natural direction to absorb frequent writes for high write performance. However, enabling in-switch write-back caching is non-trivial, as it not only is challenged by the strict programming rules and limited stateful memory of programmable switches, but also necessitates reliable protection against data loss due to switch failures. We propose FarReach, a new caching framework that supports fast, available, and reliable in-switch write-back caching. FarReach carefully co-designs both the control and data planes for cache management in programmable switches, so as to achieve high data-plane performance with lightweight control-plane management. Experiments on a Tofino switch testbed show that FarReach achieves a throughput gain of up to 6.6× over a state-of-the-art in-switch caching approach under skewed write-intensive workloads.",
    "link": "https://www.usenix.org/conference/atc23/presentation/sheng",
    "session_title": "Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "7ec2281c-30e4-459a-9193-a13019a12e58"
  },
  {
    "title": "CXL-ANNS: Software-Hardware Collaborative Memory Disaggregation and Computation for Billion-Scale Approximate Nearest Neighbor Search",
    "authors": "Junhyeok Jang,Computer Architecture and Memory Systems Laboratory, KAIST;Hanjin Choi,Computer Architecture and Memory Systems Laboratory, KAIST and Panmnesia, Inc.;Hanyeoreum Bae and Seungjun Lee,Computer Architecture and Memory Systems Laboratory, KAIST;Miryeong Kwon and Myoungsoo Jung,Computer Architecture and Memory Systems Laboratory, KAIST and Panmnesia, Inc.",
    "abstract": "We propose CXL-ANNS, a software-hardware collaborative approach to enable highly scalable approximate nearest neighbor search (ANNS) services. To this end, we first disaggregate DRAM from the host via compute express link (CXL) and place all essential datasets into its memory pool. While this CXL memory pool can make ANNS feasible to handle billion-point graphs without an accuracy loss, we observe that the search performance significantly degrades because of CXL's far-memory-like characteristics. To address this, CXL-ANNS considers the node-level relationship and caches the neighbors in local memory, which are expected to visit most frequently. For the uncached nodes, CXL-ANNS prefetches a set of nodes most likely to visit soon by understanding the graph traversing behaviors of ANNS. CXL-ANNS is also aware of the architectural structures of the CXL interconnect network and lets different hardware components therein collaboratively search for nearest neighbors in parallel. To improve the performance further, it relaxes the execution dependency of neighbor search tasks and maximizes the degree of search parallelism by fully utilizing all hardware in the CXL network.  Our empirical evaluation results show that CXL-ANNS exhibits 111.1x higher QPS with 93.3% lower query latency than state-of-the-art ANNS platforms that we tested. CXL-ANNS also outperforms an oracle ANNS system that has DRAM-only (with unlimited storage capacity) by 68.0% and 3.8x, in terms of latency and throughput, respectively.",
    "link": "https://www.usenix.org/conference/atc23/presentation/jang",
    "session_title": "Memory-Related Hardware and Software",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "0896ca99-7240-4689-ae22-a15f83fc67cb"
  },
  {
    "title": "Overcoming the Memory Wall with CXL-Enabled SSDs",
    "authors": "Shao-Peng Yang,Syracuse University;Minjae Kim,DGIST;Sanghyun Nam,Soongsil University;Juhyung Park,DGIST;Jin-yong Choi and Eyee Hyun Nam,FADU Inc.;Eunji Lee,Soongsil University;Sungjin Lee,DGIST;Bryan S. Kim,Syracuse University",
    "abstract": "This paper investigates the feasibility of using inexpensive flash memory on new interconnect technologies such as CXL (Compute Express Link) to overcome the memory wall. We explore the design space of a CXL-enabled flash device and show that techniques such as caching and prefetching can help mitigate the concerns regarding flash memory’s performance and lifetime. We demonstrate using real-world application traces that these techniques enable the CXL device to have an estimated lifetime of at least 3.1 years and serve 68–91% of the memory requests under a microsecond. We analyze the limitations of existing techniques and suggest system-level changes to achieve a DRAM-level performance using flash.",
    "link": "https://www.usenix.org/conference/atc23/presentation/yang-shao-peng",
    "session_title": "Memory-Related Hardware and Software",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "620b02a7-209d-49ec-a879-3a9674112ec6"
  },
  {
    "title": "STYX: Exploiting SmartNIC Capability to Reduce Datacenter Memory Tax",
    "authors": "Houxiang Ji,University of Illinois Urbana-Champaign;Mark Mansi,University of Wisconsin-Madison;Yan Sun,University of Illinois Urbana-Champaign;Yifan Yuan,Intel Labs;Jinghan Huang and Reese Kuper,University of Illinois Urbana-Champaign;Michael M. Swift,University of Wisconsin-Madison;Nam Sung Kim,University of Illinois Urbana-Champaign",
    "abstract": "Memory optimization kernel features, such as memory deduplication, are designed to improve the overall efficiency of systems like datacenter servers, and they have proven to be effective. However, when invoked, these kernel features notably disrupt the execution of applications, intensively consuming the server CPU's cycles and polluting its caches. To minimize such disruption, we propose STYX, a framework for offloading the intensive operations of these kernel features to SmartNIC (SNIC). STYX first RDMA-copies the server's memory regions, on which these kernel features intend to operate, to an SNIC's memory region, exploiting SNIC's RDMA capability. Subsequently, leveraging SNIC's (underutilized) compute capability, STYX makes the SNIC CPU perform the intensive operations of these kernel features. Lastly, STYX RDMA-copies their results back to a server's memory region, based on which it performs the remaining operations of the kernel features. To demonstrate the efficacy of STYX, we re-implement two memory optimization kernel features in Linux: (1) memory deduplication (ksm) and (2) compressed cache for swap pages (zswap), using the STYX framework. We then show that a system with STYX provides a 55-89% decrease in 99th-percentile latency of co-running applications, compared to a system without STYX, while preserving the benefits of these kernel features.",
    "link": "https://www.usenix.org/conference/atc23/presentation/ji",
    "session_title": "Memory-Related Hardware and Software",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "6b6334e2-3502-4a35-85dc-7038a5c9e4f8"
  },
  {
    "title": "Change Management in Physical Network Lifecycle Automation",
    "authors": "Mohammad Al-Fares, Virginia Beauregard, Kevin Grant, Angus Griffith, Jahangir Hasan, Chen Huang, Quan Leng, Jiayao Li, and Alexander Lin,Google;Zhuotao Liu,Tsinghua University;Ahmed Mansy,Google;Bill Martinusen,Formerly at Google;Nikil Mehta, Jeffrey C. Mogul, Andrew Narver, and Anshul Nigham,Google;Melanie Obenberger,Formerly at Google;Sean Smith,Databricks;Kurt Steinkraus, Sheng Sun, Edward Thiele, and Amin Vahdat,Google",
    "abstract": "Automated management of a physical network's lifecycle is critical for large networks. At Google, we manage network design, construction, evolution, and management via multiple automated systems. In our experience, one of the primary challenges is to reliably and efficiently manage change in this domain -- additions of new hardware and connectivity, planning and sequencing of topology mutations, introduction of new architectures, new software systems and fixes to old ones, etc.\nWe especially have learned the importance of supporting multiple kinds of change in parallel without conflicts or mistakes (which cause outages) while also maintaining parallelism between different teams and between different processes. We now know that this requires automated support.\nThis paper describes some of our network lifecycle goals, the automation we have developed to meet those goals, and the change-management challenges we encountered. We then discuss in detail our approaches to several specific kinds of change management: (1) managing conflicts between multiple operations on the same network; (2) managing conflicts between operations spanning the boundaries between networks; (3) managing representational changes in the models that drive our automated systems. These approaches combine both novel software systems and software-engineering practices.",
    "link": "https://www.usenix.org/conference/atc23/presentation/al-fares",
    "session_title": "Deployed Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "ad76e888-f328-4f9c-871a-fab40bb2d56d"
  },
  {
    "title": "AAsclepius: Monitoring, Diagnosing, and Detouring at the Internet Peering Edge",
    "authors": "Kaicheng Yang and Yuanpeng Li,National Key Laboratory for Multimedia Information Processing, School of Computer Science, Peking University and Peng Cheng Laboratory, Shenzhen, China;Sheng Long,National Key Laboratory for Multimedia Information Processing, School of Computer Science, Peking University and Huawei Cloud Computing Technologies Co., Ltd., China;Tong Yang,National Key Laboratory for Multimedia Information Processing, School of Computer Science, Peking University and Peng Cheng Laboratory, Shenzhen, China;Ruijie Miao and Yikai Zhao,National Key Laboratory for Multimedia Information Processing, School of Computer Science, Peking University;Chaoyang Ji, Penghui Mi, Guodong Yang, Qiong Xie, Hao Wang, Yinhua Wang, Bo Deng, Zhiqiang Liao, Chengqiang Huang, Yongqiang Yang, Xiang Huang, Wei Sun, and Xiaoping Zhu,Huawei Cloud Computing Technologies Co., Ltd., China",
    "abstract": "Network faults occur frequently in the Internet. From the perspective of cloud service providers, network faults can be classified into three categories: cloud faults, client faults, and middle faults. This paper mainly focuses on middle faults. To minimize the harm of middle faults, we build a fully automatic system in Huawei Cloud, namely AAsclepius, which consists of a monitoring subsystem, a diagnosing subsystem, and a detouring subsystem. Through the collaboration of the three subsystems, AAsclepius monitors network faults, diagnoses network faults, and detours the traffic to circumvent middle faults at the Internet peering edge. The key innovation of AAsclepius is to identify the fault direction with a novel technique, namely PathDebugging. AAsclepius has been running for two years stably, protecting Huawei Cloud from major accidents in 2021 and 2022. Our evaluation on three major points of presence in December 2021 shows that AAsclepius can efficiently and safely detour the traffic to circumvent outbound faults within a few minutes.",
    "link": "https://www.usenix.org/conference/atc23/presentation/yang-kaicheng",
    "session_title": "Deployed Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "50f30cba-933f-4586-969f-ebdd19379b1d"
  },
  {
    "title": "Deploying User-space TCP at Cloud Scale with LUNA",
    "authors": "Lingjun Zhu, Yifan Shen, Erci Xu, Bo Shi, Ting Fu, Shu Ma, Shuguang Chen, Zhongyu Wang, Haonan Wu, Xingyu Liao, Zhendan Yang, Zhongqing Chen, Wei Lin, Yijun Hou, Rong Liu, Chao Shi, Jiaji Zhu, and Jiesheng Wu,Alibaba Group",
    "abstract": "The TCP remains the workhorse protocol for many modern large-scale data centers. However, the increasingly demanding performance expectations—led by advancement in both hardware (e.g., 100Gbps linkspeed network) and software (e.g., Intel DPDK support)—make the kernel-based TCP stack no longer a favorable option. Over the past decade, multiple parties have proposed various user-stack TCP stacks offering things-as-usual TCP support with significant performance improvement. Unfortunately, we find these proposals may not function well in the field, especially in large-scale deployments. In this paper, we present LUNA, a user-space TCP stack widely deployed at Alibaba Cloud. We demonstrate the design tradeoffs, emphasizing three unique features in thread, memory, and traffic models. Further, we discuss our lessons and experiences learned from the field deployment. The extensive microbenchmark evaluations and performance statistics collected from the production systems indicate that LUNA outperforms kernel and other user-space solutions with up to 3.5× in throughput and reduces up to 53% latency.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhu-lingjun",
    "session_title": "Deployed Networking",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "4e9fb37a-f18a-4815-991f-5a7a2ea4137b"
  },
  {
    "title": "RubbleDB: CPU-Efficient Replication with NVMe-oF",
    "authors": "Haoyu Li, Sheng Jiang, and Chen Chen,Columbia University;Ashwini Raina,Princeton University;Xingyu Zhu, Changxu Luo, and Asaf Cidon,Columbia University",
    "abstract": "Due to the need to perform expensive background compaction operations, the CPU is often a performance bottleneck of persistent key-value stores. In the case of replicated storage systems, which contain multiple identical copies of the data, we make the observation that CPU can be traded off for spare network bandwidth. Compactions can be executed only once, on one of the nodes, and the already-compacted data can be shipped to the other nodes' disks, saving them significant CPU time. In order to further drive down total CPU consumption, the file replication protocol can leverage NVMe-oF, a networked storage protocol that can offload the network and storage datapaths entirely to the NIC, requiring zero involvement from the target node's CPU. However, since NVMe-oF is a one-sided protocol, if used naively, it can easily cause data corruption or data loss at the target nodes.\nWe design RubbleDB, the first key-value store that takes advantage of NVMe-oF for efficient replication. RubbleDB introduces several novel design mechanisms that address the challenges of using NVMe-oF for replicated data, including pre-allocation of static files, a novel file metadata mapping mechanism, and a new method that enforces the order of applying version edits across replicas. These ideas can be applied to other settings beyond key-value stores, such as distributed file and backup systems. We implement RubbleDB on top of RocksDB and show it provides consistent CPU savings and increases throughput by up to 1.9× and reduces tail latency by up to 93.4% for write-heavy workloads, compared to replicated key-value stores, such as ZippyDB, which conduct compactions on all replica nodes.",
    "link": "https://www.usenix.org/conference/atc23/presentation/li-haoyu",
    "session_title": "Key-Value Stores",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "32e1f1c2-702c-487a-b264-917e41bc3c99"
  },
  {
    "title": "Distributed Transactions at Scale in Amazon DynamoDB",
    "authors": "Joseph Idziorek, Alex Keyes, Colin Lazier, Somu Perianayagam, Prithvi Ramanathan, James Christopher Sorenson III, Doug Terry, and Akshat Vig,Amazon Web Services",
    "abstract": "NoSQL cloud database services are popular for their simple key-value operations,  high availability, high scalability, and predictable performance.  These characteristics are generally considered to be at odds with support for transactions  that permit atomic and serializable updates to partitioned data. This paper explains how  transactions were added to Amazon DynamoDB using a timestamp ordering protocol  while exploiting the semantics of a key-value store to achieve low latency for both  transactional and non-transactional operations. The results of experiments against a production  implementation demonstrate that distributed transactions with full ACID properties  can be supported without compromising on performance, availability, or scale.",
    "link": "https://www.usenix.org/conference/atc23/presentation/idziorek",
    "session_title": "Key-Value Stores",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "4965cad0-b4de-41e7-bb89-966389d603b9"
  },
  {
    "title": "Prefix Siphoning: Exploiting LSM-Tree Range Filters For Information Disclosure",
    "authors": "Adi Kaufman,Tel Aviv University;Moshik Hershcovitch,Tel Aviv University & IBM Research;Adam Morrison,Tel Aviv University",
    "abstract": "Key-value stores typically leave access control to the systems for which they act as storage engines. Unfortunately, attackers may circumvent such read access controls via timing attacks on the key-value store, which use differences in query response times to glean information about stored data.\nTo date, key-value store timing attacks have aimed to disclose stored values and have exploited external mechanisms that can be disabled for protection. In this paper, we point out that key disclosure is also a security threat—and demonstrate key disclosure timing attacks that exploit mechanisms of the key-value store itself.\nWe target LSM-tree based key-value stores utilizing range filters, which have been recently proposed to optimize LSM-tree range queries. We analyze the impact of the range filters SuRF and prefix Bloom filter on LSM-trees through a security lens, and show that they enable a key disclosure timing attack, which we call prefix siphoning. Prefix siphoning successfully leverages benign queries for non-present keys to identify prefixes of actual keys—and in some cases, full keys—in scenarios where brute force searching for keys (via exhaustive enumeration or random guesses) is infeasible.",
    "link": "https://www.usenix.org/conference/atc23/presentation/kaufman",
    "session_title": "Security: Attacks",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "0f632fe2-6d85-42b4-abb5-e65f6d53fb8c"
  },
  {
    "title": "EPF: Evil Packet Filter",
    "authors": "Di Jin, Vaggelis Atlidakis, and Vasileios P. Kemerlis,Brown University",
    "abstract": "The OS kernel is at the forefront of a system's security. Therefore, its own security is crucial for the correctness and integrity of user applications. With a plethora of bugs continuously discovered in OS kernel code, defenses and mitigations are essential for practical kernel security. One important defense strategy is to isolate user-controlled memory from kernel-accessible memory, in order to mitigate attacks like ret2usr and ret2dir. We present EPF (Evil Packet Filter): a new method for bypassing various (both deployed and proposed) kernel isolation techniques by abusing the BPF infrastructure of the Linux kernel: i.e., by leveraging BPF code, provided by unprivileged users/programs, as attack payloads. We demonstrate two different EPF instances, namely BPF-Reuse and BPF-ROP, which utilize malicious BPF payloads to mount privilege escalation attacks in both 32- and 64-bit x86 platforms. We also present the design, implementation, and evaluation of a set of defenses to enforce the isolation between BPF instructions and benign kernel data, and the integrity of BPF program execution, effectively providing protection against EPF-based attacks. Our implemented defenses show minimal overhead (<3%) in BPF-heavy tasks.",
    "link": "https://www.usenix.org/conference/atc23/presentation/jin",
    "session_title": "Security: Attacks",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "e6eece5b-52e2-4b29-9026-02d9ec4b1c18"
  },
  {
    "title": "Translation Pass-Through for Near-Native Paging Performance in VMs",
    "authors": "Shai Bergman and Mark Silberstein,Technion;Takahiro Shinagawa,University of Tokyo;Peter Pietzuch and Lluís Vilanova,Imperial College London",
    "abstract": "Virtual machines~(VMs) are used for consolidation, isolation, and provisioning in the cloud, but applications with large working sets are impacted by the overheads of memory address translation in VMs. Existing translation approaches incur non-trivial overheads: (i)~nested paging has a worst-case latency that increases with page table depth; and (ii)~paravirtualized and shadow paging suffer from high hypervisor intervention costs when updating guest page tables.\nWe describe Translation Pass-Through (TPT), a new memory virtualization mechanism that achieves near-native performance. TPT enables VMs to control virtual memory translation from guest-virtual to host-physical addresses using one-dimensional page tables. At the same time, inter-VM isolation is enforced by the host by exploiting new hardware support for physical memory tagging in commodity CPUs.\nWe prototype TPT by modifying the KVM/QEMU hypervisor and enlightening the Linux guest. We evaluate it by emulating the memory tagging mechanism of AMD CPUs. Our conservative performance estimates show that TPT achieves native performance for real-world data center applications, with speedups of up to 2.4× and 1.4× over nested and shadow paging, respectively.",
    "link": "https://www.usenix.org/conference/atc23/presentation/bergman",
    "session_title": "Virtual Machines",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "f902a01a-1347-44a9-ad9d-6974d9595442"
  },
  {
    "title": "Efficient Memory Overcommitment for I/O Passthrough Enabled VMs via Fine-grained Page Meta-data Management",
    "authors": "Yaohui Wang, Ben Luo, and Yibin Shen,Alibaba Group",
    "abstract": "In virtualization systems, guest memory overcommitment helps to improve the utilization of the host memory resource. However, the widely adopted I/O passthrough technique makes this task not intuitive since the hypervisor must avoid DMA (Direct Memory Access) failures when the I/O device accesses the guest memory. There already exist several solutions, for example, IOPF (I/O Page Fault) can fix DMA failures by allowing page fault triggered from the I/O device side, vIOMMU and coIOMMU avoid DMA failures by monitoring the DMA buffers in the guest. However, these solutions all face the performance concerns introduced by the memory backup/restore mechanism, i.e., memory swapping. Some free page based methods (e.g., Ballooning, Free Page Reporting, Hyperupcall) are free from memory swapping, but they either are not DMA-safe or introduce high guest communication overhead. In this paper, we propose V-Probe, a high-efficiency approach to achieve memory overcommitment for I/O passthrough enabled VMs. Using fine-grained page meta-data management, V-Probe allows the hypervisor to inspect and reclaim guest free pages actively and efficiently while guaranteeing DMA-safety. Experiments show that, for both memory reclamation and reallocation, the overhead of V-Probe is in the scale of microseconds, which is faster than Ballooning and IOPF based methods by two orders of magnitude. And our micro-benchmark and macro-benchmark show that V-Probe limits the performance impact of memory overcommitment to a low level.",
    "link": "https://www.usenix.org/conference/atc23/presentation/wang-yaohui",
    "session_title": "Virtual Machines",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "fbf3ec51-2673-4d1f-910d-5ab925ea9a20"
  },
  {
    "title": "LPNS: Scalable and Latency-Predictable Local Storage Virtualization for Unpredictable NVMe SSDs in Clouds",
    "authors": "Bo Peng, Cheng Guo, Jianguo Yao, and Haibing Guan,Shanghai Jiao Tong University",
    "abstract": "Latency predictability of storage is one important QoS target of the public clouds.\nAlthough modern storage virtualization techniques are devoted to providing fast and scalable storage for clouds, these works usually concentrate exclusively on giving high IOPS throughput without eliminating the device-level interference between multi-tenant virtualized devices and providing latency predictability for cloud tenants when the cloud infrastructures virtualize millions of the current commercially-available but unpredictable NVMe SSDs\nTo resolve this issue, we propose a novel local storage virtualization system called LPNS to provide latency-predictable QoS control for hybrid-deployed local cloud storage, including virtualized machines, containers, and bare-metal cloud services.\nThe OS-level NVMe virtualization LPNS designs reliable self-feedback control, flexible I/O queue and command scheduling, scalable polling design, and involves a deterministic network calculus-based formalization method to give upper bounds to virtualized device latency.\nThe evaluation demonstrates that LPNS can achieve up to 18.72× latency optimization of the mainstream NVMe virtualization with strong latency bounds. LPNS can also increase up to 1.45× additional throughput and a better latency bound than the state-of-the-art storage latency control systems.",
    "link": "https://www.usenix.org/conference/atc23/presentation/peng",
    "session_title": "Virtual Machines",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "295a888f-d49b-4f2b-8efd-ea836fb9bbe1"
  },
  {
    "title": "P2CACHE: Exploring Tiered Memory for In-Kernel File Systems Caching",
    "authors": "Zhen Lin,Binghamton University;Lingfeng Xiang and Jia Rao,The University of Texas at Arlington;Hui Lu,Binghamton University",
    "abstract": "Fast, byte-addressable persistent memory (PM) is becoming a reality in products. However, porting legacy kernel file systems to fully support PM requires substantial effort and encounters the challenge of bridging the gap between block-based access granularity and byte-addressability. Moreover, new PM-specific file systems remain far from production-ready, preventing them from being widely used. In this paper, we propose P2CACHE, a novel in-kernel caching mechanism to explore how legacy kernel file systems can effectively evolve in the face of fast, byte-addressable PM. P2CACHE exploits a read/write-distinguishable memory hierarchy upon a tiered memory system involving both PM and DRAM. P2CACHE leverages PM to serve all write requests for instant data durability and strong crash consistency while using DRAM to serve most read I/Os for high I/O performance. Further, P2CACHE employs a simple yet effective synchronization model between PM and DRAM by leveraging device-level parallelism. Our evaluation shows that P2CACHE can significantly increase the performance of legacy kernel file systems -- e.g., by 200x for RocksDB on Ext4 -- meanwhile equipping them with instant data durability and strong crash consistency, similar to PM-specialized file systems.",
    "link": "https://www.usenix.org/conference/atc23/presentation/lin",
    "session_title": "Persistent Memory",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "394b82ee-ba7d-44aa-b58b-aba76c09c180"
  },
  {
    "title": "Revisiting Secondary Indexing in LSM-based Storage Systems with Persistent Memory",
    "authors": "Jing Wang, Youyou Lu, Qing Wang, Yuhao Zhang, and Jiwu Shu,Department of Computer Science and Technology, Tsinghua University and Beijing National Research Center for Information Science and Technology (BNRist)",
    "abstract": "LSM-based storage systems are widely used for superior write performance on block devices. However, they currently fail to efficiently support secondary indexing, since a secondary index query operation usually needs to retrieve multiple small values, which scatter in multiple LSM components. In this work, we revisit secondary indexing in LSM-based storage systems with byte-addressable persistent memory (PM). Existing PM-based indexes are not directly competent for efficient secondary indexing. We propose PERSEID, an efficient PMbased secondary indexing mechanism for LSM-based storage systems, which takes into account both characteristics of PM and secondary indexing. PERSEID consists of (1) a specifically designed secondary index structure that achieves highperformance insertion and query, (2) a lightweight hybrid PM-DRAM and hash-based validation approach to filter out obsolete values with subtle overhead, and (3) two adapted optimizations on primary table searching issued from secondary indexes to accelerate non-index-only queries. Our evaluation shows that PERSEID outperforms existing PM-based indexes by 3-7× and achieves about two orders of magnitude performance of state-of-the-art LSM-based secondary indexing techniques even if on PM instead of disks.",
    "link": "https://www.usenix.org/conference/atc23/presentation/wang-jing",
    "session_title": "Persistent Memory",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "c405a9a2-f042-4f4d-8814-44a13c0e182d"
  },
  {
    "title": "Zhuque: Failure is Not an Option, it’s an Exception",
    "authors": "George Hodgkins,University of Colorado, Boulder;Yi Xu and Steven Swanson,University of California, San Diego;Joseph Izraelevitz,University of Colorado, Boulder",
    "abstract": "Persistent memory (PMEM) allows direct access to fast storage at byte granularity. Previously, processor caches backed by persistent memory were not persistent, complicating the design of persistent applications and reducing their performance. A new generation of systems with flush-on-fail semantics effectively offer persistent caches, offering the potential for much simpler, faster PMEM programming models. This work proposes Whole Process Persistence (WPP), a new programming model for systems with persistent caches. In the WPP model, all process state is made persistent. On restart after power failure, this state is reloaded and execution resumes in an application-defined interrupt handler. We also describe the Zhuque runtime, which transparently provides WPP by interposing on the C bindings for system calls in userspace. It requires little or no programmer effort to run applications on Zhuque. Our measurements show that Zhuque outperforms state of the art PMEM libraries, demonstrating mean speedups across all benchmarks of 5.24× over PMDK, 3.01× over Mnemosyne, 5.43× over Atlas, and 4.11× over Clobber-NVM. More important, unlike existing systems, Zhuque places no restrictions on how applications implement concurrency, allowing us to run a newer version of Memcached on Zhuque and gain more than 7.5× throughput over the fastest existing persistent implementations.",
    "link": "https://www.usenix.org/conference/atc23/presentation/hodgkins",
    "session_title": "Persistent Memory",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "c8e5179d-4122-45f2-ac9f-f3b1431e9d5e"
  },
  {
    "title": "EnvPipe: Performance-preserving DNN Training Framework for Saving Energy",
    "authors": "Sangjin Choi and Inhoe Koo,KAIST;Jeongseob Ahn,Ajou University;Myeongjae Jeon,UNIST;Youngjin Kwon,KAIST",
    "abstract": "Energy saving is a crucial mission for data center providers. Among many services, DNN training and inference are  significant contributors to energy consumption. This work focuses on saving energy in multi-GPU DNN training. Typically, energy  savings come at the cost of some degree of performance degradation. However, determining the acceptable level of performance degradation for a long-running training job can be difficult.\nThis work proposes ENVPIPE, an energy-saving DNN training  framework. ENVPIPE aims to maximize energy saving\nwhile maintaining negligible performance slowdown. ENVPIPE  takes advantage of slack time created by bubbles in pipeline parallelism. It schedules pipeline units to place bubbles  after pipeline units as frequently as possible and then stretches the execution time of pipeline units by lowering the SM frequency. During this process, ENVPIPE does not modify  hyperparameters or pipeline dependencies, preserving the original accuracy of the training task. It selectively lowers the SM frequency of pipeline units to avoid performance degradation.  We implement ENVPIPE as a library using PyTorch\nand demonstrate that it can save up to 25.2% energy in single-node  training with 4 GPUs and 28.4% in multi-node training with 16 GPUs, while keeping performance degradation to less than 1%.",
    "link": "https://www.usenix.org/conference/atc23/presentation/choi",
    "session_title": "Offloading and Scheduling",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "8f48315c-9edb-4813-9800-82f5b38e7db4"
  },
  {
    "title": "Decentralized Application-Level Adaptive Scheduling for Multi-Instance DNNs on Open Mobile Devices",
    "authors": "Hsin-Hsuan Sung and Jou-An Chen,Department of Computer Science, North Carolina State University;Wei Niu, Jiexiong Guan, and Bin Ren,Department of Computer Science, William & Mary;Xipeng Shen,Department of Computer Science, North Carolina State University",
    "abstract": "As more apps embrace AI, it is becoming increasingly common that multiple Deep Neural Networks (DNN)-powered apps may run at the same time on a mobile device. This paper explores scheduling in such multi-instance DNN scenarios, on general open mobile systems (e.g., common smartphones and tablets). Unlike closed systems (e.g., autonomous driving systems) where the set of co-run apps are known beforehand, the user of an open mobile system may install or uninstall arbitrary apps at any time, and a centralized solution is subject to adoption barriers. This work proposes the first-known decentralized application-level scheduling mechanism to address the problem. By leveraging the adaptivity of Deep Reinforcement Learning, the solution guarantees co-run apps converge to a Nash equilibrium point, yielding a good balance of gains among the apps. The solution moreover automatically adapts to the running environment and the underlying OS and hardware. Experiments show that the solution consistently produces significant speedups and energy savings across DNN workloads, hardware configurations, and running scenarios.",
    "link": "https://www.usenix.org/conference/atc23/presentation/sung",
    "session_title": "Offloading and Scheduling",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "a1fd4b99-0462-4146-8093-5f49d05c8e90"
  },
  {
    "title": "UnFaaSener: Latency and Cost Aware Offloading of Functions from Serverless Platforms",
    "authors": "Ghazal Sadeghian and Mohamed Elsakhawy,University of British Columbia;Mohanna Shahrad,McGill University;Joe Hattori,University of Tokyo;Mohammad Shahrad,University of British Columbia",
    "abstract": "We present UnFaaSener, a lightweight framework that enables serverless users to reduce their bills by harvesting non-serverless compute resources such as their VMs, on-premise servers, or personal computers. UnFaaSener is not a new serverless platform, nor does it require any support from today's production serverless platforms. It uses existing pub/sub services as the glue between the serverless application and offloading hosts. UnFaaSener's asynchronous scheduler takes into consideration the projected resource availability of the offloading hosts, various latency and cost components of serverless versus offloaded execution, the structure of the serverless application, and the developer's QoS expectations to find the most optimal offloading decisions. These decisions are then stored to be retrieved and propagated through the execution flow of the serverless application. The system supports partial offloading at the resolution of each function and utilizes several design choices to establish confidence and adaptiveness. We evaluate the effectiveness of UnFaaSener for serverless applications with various structures. UnFaaSener was able to deliver cost savings of up to 89.8% based on the invocation pattern and the structure of the application, when we limited the offloading cap to 90% in our experiments.",
    "link": "https://www.usenix.org/conference/atc23/presentation/sadeghian",
    "session_title": "Offloading and Scheduling",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "93257d3d-d79c-441e-965c-a976006b9f10"
  },
  {
    "title": "LLFree: Scalable and Optionally-Persistent Page-Frame Allocation",
    "authors": "Lars Wrenger, Florian Rommel, and Alexander Halbuer,Leibniz Universität Hannover;Christian Dietrich,Hamburg University of Technology;Daniel Lohmann,Leibniz Universität Hannover",
    "abstract": "Within the operating-system’s memory-management subsystem, the page-frame allocator is the most fundamental component. It administers the physical-memory frames, which are required to populate the page-table tree. Although the appearance of heterogeneous, nonvolatile, and huge memories has drastically changed the memory hierarchy, we still manage our physical memory with the seminal methods from the 1960s.\nWith this paper, we argue that it is time to revisit the design of page-frame allocators. We demonstrate that the Linux frame allocator not only scales poorly on multi-core systems, but it also comes with a high memory overhead, suffers from huge-frame fragmentation, and uses scattered data structures that hinder its usage as a persistent-memory allocator. With LLFree, we provide a new lock- and log-free allocator design that scales well, has a small memory footprint, and is readily applicable to nonvolatile memory. LLFree uses cache-friendly data structures and exhibits antifragmentation behavior without inducing additional performance overheads. Compared to the Linux frame allocator, LLFree reduces the allocation time for concurrent 4 KiB allocations by up to 88 percent and for 2 MiB allocations by up to 98 percent. For memory compaction, LLFree decreases the number of required page movements by 64 percent.",
    "link": "https://www.usenix.org/conference/atc23/presentation/wrenger",
    "session_title": "Kernel and Concurrency",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "001a884a-79d2-4a3f-a738-0d39a1fb2915"
  },
  {
    "title": "SingularFS: A Billion-Scale Distributed File System Using a Single Metadata Server",
    "authors": "Hao Guo, Youyou Lu, Wenhao Lv, Xiaojian Liao, Shaoxun Zeng, and Jiwu Shu,Tsinghua University",
    "abstract": "Billion-scale distributed file systems play an important role in modern datacenters, and it is desirable and possible to support these file systems with a single metadata server. However, fully exploiting its performance faces unique challenges, including crash consistency overhead, lock contention in a shared directory, and NUMA locality.\nThis paper presents SingularFS, a billion-scale distributed file system using a single metadata server. It includes three key techniques. First, SingularFS proposes log-free metadata operations to eliminate additional crash consistency overheads for most metadata operations. Second, SingularFS designs hierarchical concurrency control to maximize the parallelism of metadata operations. Third, SingularFS introduces hybrid inode partition to reduce inter-NUMA access and intra-NUMA lock contention. Our extensive evaluation shows that SingularFS consistently provides high performance for metadata operations on both private and shared directories, and has a steadily high throughput for the billion-scale directory tree.",
    "link": "https://www.usenix.org/conference/atc23/presentation/guo",
    "session_title": "Kernel and Concurrency",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "f84af1ec-fa86-4034-b4c1-85c19a327734"
  },
  {
    "title": "The Hitchhiker's Guide to Operating Systems",
    "authors": "Yanyan Jiang,Nanjing University",
    "abstract": "This paper presents a principled approach to operating system teaching that complements the existing practices. Our methodology takes state transition systems as first-class citizens in operating systems teaching and demonstrates how to effectively convey non-trivial research systems to junior OS learners within this framework. This paper also presents the design and implementation of a minimal operating system model with nine system calls covering process-based isolation, thread-based concurrency, and crash consistency, with a model checker and interactive state space explorer for exhaustively examining all possible system behaviors.",
    "link": "https://www.usenix.org/conference/atc23/presentation/jiang-yanyan",
    "session_title": "Kernel and Concurrency",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "a51f2b81-7849-4491-89b5-b80b20804727"
  },
  {
    "title": "Accelerating Distributed MoE Training and Inference with Lina",
    "authors": "Jiamin Li,City University of Hong Kong;Yimin Jiang,ByteDance Inc.;Yibo Zhu,unaffiliated;Cong Wang,City University of Hong Kong;Hong Xu,The Chinese University of Hong Kong",
    "abstract": "Scaling model parameters improves model quality at the price of high computation overhead. Sparsely activated models, usually in the form of Mixture of Experts (MoE) architecture, have sub-linear scaling of computation cost with model size, thus providing opportunities to train and serve a larger model at a lower cost. However, distributed MoE training and inference are inefficient, mainly due to the interleaved all-to-all communication during model computation.\nThis paper makes two main contributions. First, we systematically analyze all-to-all overhead in distributed MoE and present the main causes for it to be the bottleneck in training and inference, respectively. Second, we design and build Lina to address the all-to-all bottleneck head-on. Lina opportunistically prioritizes all-to-all over the concurrent allreduce whenever feasible using tensor partitioning, so all-to-all and training step time is improved. Lina further exploits the inherent pattern of expert selection to dynamically schedule resources during inference, so that the transfer size and bandwidth of all-to-all across devices are balanced amid the highly skewed expert popularity in practice. Experiments on an A100 GPU testbed show that Lina reduces the training step time by up to 1.73x and reduces the 95%tile inference time by an average of 1.63x over the state-of-the-art systems.",
    "link": "https://www.usenix.org/conference/atc23/presentation/li-jiamin",
    "session_title": "Optimizing ML",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "05fe9cf3-d9ca-4850-92c5-d835de54884a"
  },
  {
    "title": "SmartMoE: Efficiently Training Sparsely-Activated Models through Combining Offline and Online Parallelization",
    "authors": "Mingshu Zhai, Jiaao He, Zixuan Ma, Zan Zong, Runqing Zhang, and Jidong Zhai,Tsinghua University",
    "abstract": "Deep neural networks are growing large for stronger model ability, consuming enormous computation resources to train them. Sparsely activated models have been increasingly proposed and deployed to reduce training costs while enlarging model size. Unfortunately, previous auto-parallelization approaches designed for dense neural networks can hardly be applied to these sparse models, as sparse models are data-sensitive and barely considered by prior works.\nTo address these challenges, we propose SmartMoE to perform distributed training for sparsely activated models automatically. We find optimization opportunities in an enlarged space of hybrid parallelism, considering the workload of data-sensitive models. The space is decomposed into static pools offline, and choices to pick within a pool online. To construct an optimal pool ahead of training, we introduce a data-sensitive predicting method for performance modeling. Dynamic runtime selection of optimal parallel strategy is enabled by our efficient searching algorithm. We evaluate SmartMoE on three platforms with up to 64 GPUs. It achieves up to 1.88x speedup in end-to-end training over the state-of-the-art MoE model training system FasterMoE.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhai",
    "session_title": "Optimizing ML",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "f52d1d9e-5288-486a-b98f-5e5816016354"
  },
  {
    "title": "MSRL: Distributed Reinforcement Learning with Dataflow Fragments",
    "authors": "Huanzhou Zhu,Imperial College London;Bo Zhao,Imperial College London and Aalto University;Gang Chen, Weifeng Chen, Yijie Chen, and Liang Shi,Huawei Technologies Co., Ltd.;Yaodong Yang,Peking University;Peter Pietzuch,Imperial College London;Lei Chen,Hong Kong University of Science and Technology",
    "abstract": "A wide range of reinforcement learning (RL) algorithms have been proposed, in which agents learn from interactions with a simulated environment. Executing such RL training loops is computationally expensive, but current RL systems fail to support the training loops of different RL algorithms efficiently on GPU clusters: they either hard-code algorithm-specific strategies for parallelization and distribution; or they  accelerate only parts of the computation on GPUs (e.g.,  DNN policy updates). We observe that current systems lack an abstraction that decouples the definition of an RL algorithm from its strategy for distributed execution.\nWe describe MSRL, a distributed RL training system that uses the new abstraction of a fragmented dataflow graph (FDG) to execute RL algorithms in a flexible way. An FDG is a heterogenous dataflow representation of an RL algorithm, which maps functions from the RL training loop to independent parallel dataflow fragments. Fragments account for the diverse nature of RL algorithms: each fragment can execute on a different device through a low-level dataflow implementation, e.g., an operator graph of a DNN engine, a CUDA GPU kernel, or a multi-threaded CPU process. At deployment time, a distribution policy governs how fragments are mapped to devices, without requiring changes to the RL algorithm implementation. Our experiments show that MSRL exposes trade-offs between different execution strategies, while surpassing the performance of existing RL systems with fixed execution strategies.",
    "link": "https://www.usenix.org/conference/atc23/presentation/zhu-huanzhou",
    "session_title": "Optimizing ML",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "cfa38a8c-4783-4a66-bc30-de2726149bfb"
  },
  {
    "title": "Beware of Fragmentation: Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent",
    "authors": "Qizhen Weng and Lingyun Yang,Hong Kong University of Science and Technology;Yinghao Yu,Alibaba Group and Hong Kong University of Science and Technology;Wei Wang,Hong Kong University of Science and Technology;Xiaochuan Tang, Guodong Yang, and Liping Zhang,Alibaba Group",
    "abstract": "Large tech companies are piling up a massive number of GPUs in their server fleets to run diverse machine learning (ML) workloads. However, these expensive devices often suffer from significant underutilization. To tackle this issue, GPU sharing techniques have been developed to enable multiple ML tasks to run on a single GPU. Nevertheless, our analysis of Alibaba production traces reveals that allocating partial GPUs can result in severe GPU fragmentation in large clusters, leaving hundreds of GPUs unable to be allocated. Existing resource packing algorithms fall short in addressing this problem, as GPU sharing mandates a new scheduling formulation beyond the classic bin packing.\nIn this paper, we propose a novel measure of fragmentation to statistically quantify the extent of GPU fragmentation caused by different sources. Building upon this measure, we propose to schedule GPU-sharing workloads towards the direction of the steepest descent of fragmentation, an approach we call Fragmentation Gradient Descent (FGD). Intuitively, FGD packs tasks to minimize the growth of GPU fragmentation, thereby achieving the maximum GPU allocation rate. We have implemented FGD as a new scheduler in Kubernetes and evaluated its performance using production traces on an emulated cluster comprising more than 6,200 GPUs. Compared to the existing packing-based schedulers, FGD reduces unallocated GPUs by up to 49%, resulting in the utilization of additional 290 GPUs.",
    "link": "https://www.usenix.org/conference/atc23/presentation/weng",
    "session_title": "GPU",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "94a9d03f-5d92-4818-b191-6166955c8c6e"
  },
  {
    "title": "Towards Iterative Relational Algebra on the GPU",
    "authors": "Ahmedur Rahman Shovon and Thomas Gilray,University of Alabama at Birmingham;Kristopher Micinski,Syracuse University;Sidharth Kumar,University of Alabama at Birmingham",
    "abstract": "Iterative relational algebra (RA kernels in a fixed-point loop) enables bottom-up logic programming languages such as Datalog. Such declarative languages are attractive targets for high-performance implementations of relational data analytics in fields such as graph mining, program analysis, and social-media analytics. Language-level constructs are implemented via high-performance relational algebra primitives (e.g., projections, reorderings, and joins). Such primitives would appear a natural target for GPUs, obtaining high throughput on large datasets. However, state-of-the-art Datalog engines are still CPU-based, scaling best between 8--16 threads. While much has explored standalone RA operations on the GPU, relatively less work focuses on iterative RA, which exposes new challenges (e.g., deduplication and memory management). In this short paper, we present a GPU-based hash-join implementation, leveraging (a) a novel open-addressing-based hash table implementation, (b) operator fusing to optimize memory access and (c) two variant implementations of deduplication. To evaluate our work, we implement transitive closure using our hash-join-based CUDA library and compared its performance against cuDF (GPU-based) and Souffl'e (CPU-based). We show favorable results against both, with gains up to 10.8× against cuDF and 3.9× against Souffl'e.",
    "link": "https://www.usenix.org/conference/atc23/presentation/shovon",
    "session_title": "GPU",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "1ea4eb9d-237a-4b1d-a0bf-7f8200af262e"
  },
  {
    "title": "VectorVisor: A Binary Translation Scheme for Throughput-Oriented GPU Acceleration",
    "authors": "Samuel Ginzburg,Princeton University;Mohammad Shahrad,University of British Columbia;Michael J. Freedman,Princeton University",
    "abstract": "Beyond conventional graphics applications, general-purpose GPU acceleration has had significant impact on machine learning and scientific computing workloads. Yet, it has failed to see widespread use for server-side applications, which we argue is because GPU programming models offer a level of abstraction that is either too low-level (e.g., OpenCL, CUDA) or too high-level (e.g., TensorFlow, Halide), depending on the language. Not all applications fit into either category, resulting in lost opportunities for GPU acceleration.\nWe introduce VectorVisor, a vectorized binary translator that enables new opportunities for GPU acceleration by introducing a novel programming model for GPUs. With VectorVisor, many copies of the same server-side application are run concurrently on the GPU, where VectorVisor mimics the abstractions provided by CPU threads. To achieve this goal, we demonstrate how to (i) provide cross-platform support for system calls and recursion using continuations and (ii) make full use of the excess register file capacity and high memory bandwidth of GPUs. We then demonstrate that our binary translator is able to transparently accelerate certain classes of compute-bound workloads, gaining significant improvements in throughput-per-dollar of up to 2.9 × compared to Intel x86-64 VMs in the cloud, and in some cases match the throughput-per-dollar of native CUDA baselines.",
    "link": "https://www.usenix.org/conference/atc23/presentation/ginzburg",
    "session_title": "GPU",
    "conference_name": "ATC",
    "date": "2023-07-10",
    "paper_id": "04feab7f-7ba5-4c49-9f17-fe190dac4d73"
  }
]