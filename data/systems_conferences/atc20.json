[
  {
    "title": "Libnvmmio: Reconstructing Software IO Path with Failure-Atomic Memory-Mapped Interface",
    "authors": "Jungsik Choi,Sungkyunkwan University;Jaewan Hong and Youngjin Kwon,KAIST;Hwansoo Han,Sungkyunkwan University",
    "abstract": "Fast non-volatile memory (NVM) technology changes the landscape of file systems. A series of research efforts to overcome the traditional file system designs that limit NVM performance. This research has proposed NVM-optimized file systems to leverage the favorable features of byte-addressability, low-latency, and high scalability. The work tailors the file system stack to reduce the software overhead in using fast NVM. As a further step, NVM IO systems use the memory-mapped interface to fully capture the performance of NVM. However, the memory-mapped interface makes it difficult to manage the consistency semantics of NVM, as application developers need to consider the low-level details. In this work, we propose Libnvmmio, an extended user-level memory-mapped IO, which provides failure-atomicity and frees developers from the crash-consistency headaches. Libnvmmio reconstructs a common data IO path with memory-mapped IO, providing better performance and scalability than the state-of-the-art NVM file systems. On a number of microbenchmarks, Libnvmmio gains up to 2.2x better throughput and 13x better scalability than file accesses via system calls to underlying file systems. For SQLite, Libnvmmio improves the performance of Mobibench and TPC-C by up to 93% and 27%, respectively. For MongoDB, it gains up to 42% throughput increase on write-intensive YCSB workloads.",
    "link": "https://www.usenix.org/conference/atc20/presentation/choi",
    "session_title": "The Non-Volatile One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "MatrixKV: Reducing Write Stalls and Write Amplification in LSM-tree Based KV Stores with Matrix Container in NVM",
    "authors": "Ting Yao, Yiwen Zhang, and Jiguang Wan,Huazhong University of Science and Technology;Qiu Cui and Liu Tang,PingCAP;Hong Jiang,UT Arlington;Changsheng Xie,Huazhong University of Science and Technology;Xubin He,Temple University",
    "abstract": "Popular LSM-tree based key-value stores suffer from suboptimal and unpredictable performance due to write amplification and write stalls that cause application performance to periodically drop to nearly zero. Our preliminary experimental studies reveal that (1) write stalls mainly stem from the significantly large amount of data involved in each compaction betweenL0–L1(i.e., the first two levels of LSM-tree), and (2) write amplification increases with the depth of LSM-trees. Existing works mainly focus on reducing write amplification, while only a couple of them target mitigating write stalls.\nIn this paper, we exploit non-volatile memory (NVM) to address these two limitations and propose MatrixKV, a new LSM-tree based KV store for systems with multi-tier DRAM-NVM-SSD storage. MatrixKV's design principles include performing smaller and cheaperL0–L1compaction to reduce write stalls while reducing the depth of LSM-trees to mitigate write amplification.\nTo this end, four novel techniques are proposed. First, we relocate and manage theL0level in NVM with our proposedmatrix container. Second, the newcolumn compactionis devised to compactL0toL1at fine-grained key ranges, thus substantially reducing the amount of compaction data. Third, MatrixKV increases the width of each level to decrease the depth of LSM-trees thus mitigating write amplification. Finally, thecross-row hint searchis introduced for the matrix container to keep adequate read performance. We implement MatrixKV based on RocksDB and evaluate it on a hybrid DRAM/NVM/SSD system using Intel's latest 3D Xpoint NVM device Optane DC PMM. Evaluation results show that, with the same amount of NVM, MatrixKV achieves 5× and 1.9× lower 99thpercentile latencies, and 3.6× and 2.6× higher random write throughput than RocksDB and the state-of-art LSM-based KVS NoveLSM respectively.",
    "link": "https://www.usenix.org/conference/atc20/presentation/yao",
    "session_title": "The Non-Volatile One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Disaggregating Persistent Memory and Controlling Them Remotely: An Exploration of Passive Disaggregated Key-Value Stores",
    "authors": "Shin-Yeh Tsai,Purdue University;Yizhou Shan and Yiying Zhang,University of California, San Diego",
    "abstract": "Many datacenters and clouds manage storage systems separately from computing services for better manageability and resource utilization. These existing disaggregated storage systems use hard disks or SSDs as storage media. Recently, the technology of persistent memory (PM) has matured and seen initial adoption in several datacenters. Disaggregating PM could enjoy the same benefits of traditional disaggregated storage systems, but it requires new designs because of its memory-like performance and byte addressability.\nIn this paper, we explore the design of disaggregating PM and managing them remotely from compute servers, a model we call passive disaggregated persistent memory, or pDPM. Compared to the alternative of managing PM at storage servers, pDPM significantly lowers monetary and energy costs and avoids scalability bottlenecks at storage servers.\nWe built three key-value store systems using the pDPM model. The first one lets all compute nodes directly access and manage storage nodes. The second uses a central coordinator to orchestrate the communication between compute and storage nodes. These two systems have various performance and scalability limitations. To solve these problems, we built Clover, a pDPM system that separates the location, communication mechanism, and management strategy of the data plane and the metadata/control plane. Compute nodes access storage nodes directly for data operations, while one or few global metadata servers handle all metadata/control operations. From our extensive evaluation of the three pDPM systems, we found Clover to be the best-performing pDPM system. Its performance under common datacenter workloads is similar to non-pDPM remote in-memory key-value store, while reducing CapEx and OpEx by 1.4x and 3.9x.",
    "link": "https://www.usenix.org/conference/atc20/presentation/tsai",
    "session_title": "The Non-Volatile One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "SplinterDB: Closing the Bandwidth Gap for NVMe Key-Value Stores",
    "authors": "Alexander Conway,Rutgers University and Vmware Research;Abhishek Gupta,DropBox;Vijay Chidambaram,University of Texas at Austin and VMware Research;Martin Farach-Colton,Rutgers University;Richard Spillane,VMware;Amy Tai and Rob Johnson,VMware Research",
    "abstract": "Modern NVMe solid state drives offer significantly higher bandwidth and low latency than prior storage devices. Current key-value stores struggle to fully utilize the bandwidth of such devices. This paper presents SplinterDB, a new key-value store explicitly designed for NVMe solid state drives.\nSplinterDB is designed around a novel data structure (the STBε-tree), that exposes I/O and CPU concurrency and reduces write amplification without sacrificing query performance. STBε-tree combines ideas from log-structured merge trees and Bε-trees to reduce write amplification and CPU costs of compaction. The SplinterDB memtable and cache are designed to be highly concurrent and to reduce cache misses.\nWe evaluate SplinterDB on a number of micro- and macro-benchmarks, and show that SplinterDB outperforms RocksDB, a state-of-the-art key-value store, by a factor of 6–10x on insertions and 2–2.6x on point queries, while matching RocksDB on small range queries. Furthermore, SplinterDB reduces write amplification by 2x compared to RocksDB.",
    "link": "https://www.usenix.org/conference/atc20/presentation/conway",
    "session_title": "The Non-Volatile One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Twizzler: a Data-Centric OS for Non-Volatile Memory",
    "authors": "Daniel Bittman and Peter Alvaro,UC Santa Cruz;Pankaj Mehra,IEEE Member;Darrell D. E. Long,UC Santa Cruz;Ethan L. Miller,UC Santa Cruz / Pure StorageBest Presentation Award Winner!",
    "abstract": "Byte-addressable, non-volatile memory (NVM) presents an opportunity to rethink the entire system stack. We present Twizzler, an operating system redesign for this near-future. Twizzler removes the kernel from the I/O path, provides programs with memory-style access to persistent data using small (64 bit), object-relative cross-object pointers, and enables simple and efficient long-term sharing of data both between applications and between runs of an application. Twizzler provides a clean-slate programming model for persistent data, realizing the vision of Unix in a world of persistent RAM.\nWe show that Twizzler is simpler, more extensible, and more secure than existing I/O models and implementations by building software for Twizzler and evaluating it on NVM DIMMs. Most persistent pointer operations in Twizzler impose less than 0.5 ns added latency. Twizzler operations are up to 13× faster than Unix, and SQLite queries are up to 4.2× faster than on PMDK. YCSB workloads ran 1.1–2.9× faster on Twizzler than on native and NVM-optimized SQLite backends.",
    "link": "https://www.usenix.org/conference/atc20/presentation/bittman",
    "session_title": "The Non-Volatile One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "BASTION: A Security Enforcement Network Stack for Container Networks",
    "authors": "Jaehyun Nam, Seungsoo Lee, and Hyunmin Seo,KAIST;Phil Porras and Vinod Yegneswaran,SRI International;Seungwon Shin,KAIST",
    "abstract": "In this work, we conduct a security analysis of container networks, identifying a number of concerns that arise from the exposure of unnecessary network operations by containerized applications and discuss their implications.  We then present a new high-performance security enforcement network stack, called BASTION, which extends the container hosting platform with an intelligent container-aware communication sandbox.  BASTION introduces (i) a network visibility service that provides fine-grained control over the visible network topology per container application, and (ii) a traffic visibility service, which securely isolates and forwards inter-container traffic in a point-to-point manner, preventing the exposure of this traffic to other peer containers.  Our evaluation demonstrates how BASTION can effectively mitigate several adversarial attacks in container networks while improving the overall performance up to 25.4% within single-host containers, and 17.7% for cross-host container communications.",
    "link": "https://www.usenix.org/conference/atc20/presentation/nam",
    "session_title": "The Data Center One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Spool: Reliable Virtualized NVMe Storage Pool in Public Cloud Infrastructure",
    "authors": "Shuai Xue, Shang Zhao, and Quan Chen,Shanghai Jiao Tong University and Alibaba Cloud;Gang Deng, Zheng Liu, Jie Zhang, Zhuo Song, Tao Ma, Yong Yang, Yanbo Zhou, Keqiang Niu, and Sijie Sun,Alibaba Cloud;Minyi Guo,Shanghai Jiao Tong University",
    "abstract": "Ensuring high reliability and availability of virtualized NVMe storage systems is crucial for large-scale clouds. However, previous I/O virtualization systems only focus on improving I/O performance and ignore the above challenges. To this end, we propose Spool, a reliable NVMe virtualization system. Spool has three key advantages: (1) It diagnoses the device failure type and only replaces the NVMe devices with actual media errors. Other data link errors are handled through resetting the device controller, minimizing data loss due to unnecessary device replacement. (2) It ensures the consistency and correctness of the data when resetting the controller and upgrading the storage virtualization system. (3) It greatly reduces the restart time of the NVMe virtualization system. The quick restart eliminates complaints from tenants due to denial-of-service during a system upgrade and failure recovery. Our evaluation shows that Spool provides reliable storage services with performance loss smaller than 3%, and it reduces restart time by 91% when compared with SPDK.",
    "link": "https://www.usenix.org/conference/atc20/presentation/xue",
    "session_title": "The Data Center One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "HDDse: Enabling High-Dimensional Disk State Embedding for Generic Failure Detection System of Heterogeneous Disks in Large Data Centers",
    "authors": "Ji Zhang,Huazhong University of Science and Technology and University of Amsterdam;Ping Huang,Huazhong University of Science and Technology and Temple University;Ke Zhou,Huazhong University of Science and Technology;Ming Xie,Tencent Inc.;Sebastian Schelter,University of Amsterdam",
    "abstract": "The reliability of a storage system is crucial in large data centers. Hard disks are widely used as primary storage devices in modern data centers, where disk failures constantly happen. Disk failures could lead to a serious system interrupt or even permanent data loss. Many hard disk failure detection approaches have been proposed to solve this problem. However, existing approaches are not generic models for heterogeneous disks in large data centers, e.g, most of the approaches only consider datasets consisting of disks from the same manufacturer (and often of the same disk models). Moreover, some approaches achieve high detection performance in most cases but can not deliver satisfactory results when the datasets of a relatively small amount of disks or have new datasets which have not been seen during training. In this paper, we propose a novel generic disk failure detection approach for heterogeneous disks that can not only deliver a better detective performance but also have good detective adaptability to the disks which have not appeared in training, even when dealing with imbalanced or a relatively small amount of disk datasets. We employ a Long Short-Term Memory (LSTM) based siamese network that can learn the dynamically changed long-term behavior of disk healthy statues. Moreover, this structure can generate a unified and efficient high dimensional disk state embeddings for failure detection of heterogeneous disks. Our evaluation results on two real-world data centers confirm that the proposed system is effective and outperforms several state-of-the-art approaches. Furthermore, we have successfully applied the proposed system to improve the reliability of a data center and exhibit practical long-term availability.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhang-ji",
    "session_title": "The Data Center One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Adaptive Placement for In-memory Storage Functions",
    "authors": "Ankit Bhardwaj, Chinmay Kulkarni, and Ryan Stutsman,University of Utah",
    "abstract": "Fast networks and the desire for high resource utilization in data centers and the cloud have driven disaggregation. Application compute is separated from storage, but this leads to high overheads when data must move over the network for simple operations on it. Alternatively, systems could allow applications to run application logic within storage via user-defined functions. Unfortunately, this ties provisioning and utilization of storage and compute resources together again.\nWe present a new approach to executing storage-level functions in an in-memory key-value store that avoids this problem by dynamically deciding where to execute functions over data. Users write storage functions that are logically decoupled from storage, but storage servers choose where to run invocations of these functions physically. By using a server-internal cost model and observing function execution, servers choose to directly run inexpensive functions, while preferring to execute functions with high CPU-cost at client machines.\nWe show that with this approach storage servers can reduce network request processing costs, avoid server compute bottlenecks, and improve aggregate storage system throughput.  We realize our approach on an in-memory key-value store that executes 3.2 million strict serializable user-defined storage functions per second with 100 us response times. When running a mix of logic from different applications, it provides throughput better than running that logic purely at storage servers (85% more) or purely at clients (10% more). For our workloads, it also reduces latency (up to 2x) and transactional aborts (up to 33%) over pure client-side execution.",
    "link": "https://www.usenix.org/conference/atc20/presentation/bhardwaj",
    "session_title": "The Data Center One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "NetKernel: Making Network Stack Part of the Virtualized Infrastructure",
    "authors": "Zhixiong Niu,Microsoft Research;Hong Xu,City University of Hong Kong;Peng Cheng,Microsoft Research;Qiang Su,City University of Hong Kong;Yongqiang Xiong,Microsoft Research;Tao Wang,New York University;Dongsu Han,KAIST;Keith Winstein,Stanford University",
    "abstract": "This paper presents a system called NetKernel that decouples the network stack from the guest virtual machine and offers it as an independent module. NetKernel represents a new paradigm where network stack can be managed as part of the virtualized infrastructure. It provides important efficiency benefits: By gaining control and visibility of the network stack, operator can perform network management more directly and flexibly, such as multiplexing VMs running different applications to the same network stack module to save CPU. Users also benefit from the simplified stack deployment and better performance. For example mTCP can be deployed without API change to support nginx natively, and shared memory networking can be readily enabled to improve performance of colocated VMs. Testbed evaluation using 100G NICs shows that NetKernel preserves the performance and scalability of both kernel and userspace network stacks, and provides the same isolation as the current architecture.",
    "link": "https://www.usenix.org/conference/atc20/presentation/niu",
    "session_title": "The Data Center One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Platinum: A CPU-Efficient Concurrent Garbage Collector for Tail-Reduction of Interactive Services",
    "authors": "Mingyu Wu, Ziming Zhao, Yanfei Yang, Haoyu Li, Haibo Chen, Binyu Zang, and Haibing Guan,Shanghai Jiao Tong University;Sanhong Li, Chuansheng Lu, and Tongbao Zhang,Alibaba",
    "abstract": "The service-oriented architecture decomposes a monolithic service into single-purpose services for better modularity and reliability. The interactive nature, plus the fact of running inside a managed runtime, makes garbage collection a key to the reduction of tail latency of such services. However, prior concurrent garbage collectors reduce stop-the-world (STW) pauses by consuming more CPU resources, which can affect the application performance, especially under heavy workload. Based on an in-depth analysis of representative latency-sensitive workloads, this paper proposes Platinum, a new concurrent garbage collector to reduce the tail latency with moderate CPU consumption. The key idea is to construct an isolated execution environment for concurrent mutators to improve application latency without interfering with the execution of GC threads. Platinum further leverages a new hardware feature (i.e., memory protection keys) to eliminate software overhead in previous concurrent collectors. An evaluation against state-of-the-art concurrent garbage collectors shows that Platinum can significantly reduce the tail latency of real-world interactive services (by as much as 79.3%) while inducing moderate CPU consumption.",
    "link": "https://www.usenix.org/conference/atc20/presentation/wu-mingyu",
    "session_title": "The Cloudy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "PinK: High-speed In-storage Key-value Store with Bounded Tails",
    "authors": "Junsu Im and Jinwook Bae,DGIST;Chanwoo Chung and Arvind,Massachusetts Institute of Technology;Sungjin Lee,DGISTAwarded Best Paper!",
    "abstract": "Key-value store based on a log-structured merge-tree (LSM-tree) is preferable to hash-based KV store because an LSM-tree can support a wider variety of operations and show better performance, especially for writes.  However, LSM-tree is difficult to implement in the resource constrained environment of a key-value SSD (KV-SSD) and consequently, KV-SSDs typically use hash-based schemes. We present PinK, a design and implementation of an LSM-tree-based KV-SSD, which compared to a hash-based KV-SSD, reduces 99thpercentile tail latency by 73%, improves average read latency by 42% and shows 37% higher throughput. The key idea in improving the performance of an LSM-tree in a resource constrained environment is to avoid the use of Bloom filters and instead, use a small amount of DRAM to keep/pin the top levels of the LSM-tree.",
    "link": "https://www.usenix.org/conference/atc20/presentation/im",
    "session_title": "The Cloudy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "OPTIMUSCLOUD: Heterogeneous Configuration Optimization for Distributed Databases in the Cloud",
    "authors": "Ashraf Mahgoub and Alexander Michaelson Medoff,Purdue University;Rakesh Kumar,Microsoft;Subrata Mitra,Adobe Research;Ana Klimovic,Google Research;Somali Chaterji and Saurabh Bagchi,Purdue University",
    "abstract": "Achieving cost and performance efficiency for cloud-hosted databases requires exploring a large configuration space, including the parameters exposed by the database along with the variety of VM configurations available in the cloud. Even small deviations from an optimal configuration have significant consequences on performance and cost. Existing systems that automate cloud deployment configuration can select near-optimal instance types for homogeneous clusters of virtual machines and for stateless, recurrent data analytics workloads. We show that to find optimal performance-per-$ cloud deployments for NoSQL database applications, it is important to (1) consider heterogeneous cluster configurations, (2) jointly optimize database and VM configurations, and (3) dynamically adjust configuration as workload behavior changes. We present OPTIMUSCLOUD, an online reconfiguration system that can efficiently perform such joint and heterogeneous configuration for dynamic workloads. We evaluate our system with two clustered NoSQL systems: Cassandra and Redis, using three representative workloads and show that OPTIMUSCLOUD provides 40% higher throughput/$ and 4.5× lower 99-percentile latency on average compared to state-of-the-art prior systems, CherryPick, Selecta, and SOPHIA.",
    "link": "https://www.usenix.org/conference/atc20/presentation/mahgoub",
    "session_title": "The Cloudy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider",
    "authors": "Mohammad Shahrad, Rodrigo Fonseca, Íñigo Goiri, Gohar Chaudhry, Paul Batum, Jason Cooke, Eduardo Laureano, Colby Tresness, Mark Russinovich, and Ricardo Bianchini,Microsoft Azure and Microsoft ResearchCommunity Award Winner!",
    "abstract": "Function as a Service (FaaS) has been gaining popularity as a way to deploy computations to serverless backends in the cloud. This paradigm shifts the complexity of allocating and provisioning resources to the cloud provider, which has to provide the illusion of always-available resources (i.e., fast function invocations without cold starts) at the lowest possible resource cost. Doing so requires the provider to deeply understand the characteristics of the FaaS workload. Unfortunately, there has been little to no public information on these characteristics. Thus, in this paper, we first characterize the entire production FaaS workload of Azure Functions. We show for example that most functions are invoked very infrequently, but there is an 8-order-of-magnitude range of invocation frequencies. Using observations from our characterization, we then propose a practical resource management policy that significantly reduces the number of function cold starts, while spending fewer resources than state-of-the-practice policies.",
    "link": "https://www.usenix.org/conference/atc20/presentation/shahrad",
    "session_title": "The Cloudy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Lessons Learned from the Chameleon Testbed",
    "authors": "Kate Keahey,Argonne National Laboratory;Jason Anderson and Zhuo Zhen,University of Chicago;Pierre Riteau,StackHPC Ltd;Paul Ruth,RENCI UNC Chapel Hill;Dan Stanzione,Texas Advanced Computing Center;Mert Cevik,RENCI UNC Chapel Hill;Jacob Colleran and Haryadi S. Gunawi,University of Chicago;Cody Hammock,Texas Advanced Computing Center;Joe Mambretti,Northwestern University;Alexander Barnes, François Halbah, Alex Rocha, and Joe Stubbs,Texas Advanced Computing Center",
    "abstract": "The Chameleon testbed is a case study in adapting the cloud paradigm for computer science research. In this paper, we explain how this adaptation was achieved, evaluate it from the perspective of supporting the most experiments for the most users, and make a case that utilizing mainstream technology in research testbeds can increase efficiency without compromising on functionality. We also highlight the opportunity inherent in the shared digital artifacts generated by testbeds and give an overview of the efforts we've made to develop it to foster reproducibility.",
    "link": "https://www.usenix.org/conference/atc20/presentation/keahey",
    "session_title": "The Cloudy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "SPINFER: Inferring Semantic Patches for the Linux Kernel",
    "authors": "Lucas Serrano and Van-Anh Nguyen,Sorbonne University/Inria/LIP6;Ferdian Thung, Lingxiao Jiang, and David Lo,School of Information Systems, Singapore Management University;Julia Lawall and Gilles Muller,Inria/Sorbonne University/LIP6",
    "abstract": "In a large software system such as the Linux kernel, there is a continual need for large-scale changes across many source files, triggered by new needs or refined design decisions.  In this paper, we propose to ease such changes by suggesting transformation rules to developers, inferred automatically from a collection of examples.  Our approach can help automate large-scale changes as well as help understand existing large-scale changes, by highlighting the various cases that the developer who performed the changes has taken into account.  We have implemented our approach as a tool, Spinfer.  We evaluate Spinfer on a range of challenging large-scale changes from the Linux kernel and obtain rules that achieve 86% precision and 69% recall on average.",
    "link": "https://www.usenix.org/conference/atc20/presentation/serrano",
    "session_title": "The Buggy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "FuZZan: Efficient Sanitizer Metadata Design for Fuzzing",
    "authors": "Yuseok Jeon,Purdue University;WookHyun Han,KAIST;Nathan Burow,Purdue University;Mathias Payer,EPFL",
    "abstract": "Fuzzing is one of the most popular and effective techniques for finding software bugs. To detect triggered bugs, fuzzers leverage a variety of sanitizers in practice. Unfortunately, sanitizers target long running experiments—e.g., developer test suites—not fuzzing, where execution time is highly variable ranging from extremely short to long. Design decisions made for developer test suites introduce high overhead on short lived fuzzing executions, decreasing the fuzzer’s throughput and thereby reducing effectiveness. The root cause of this sanitization overhead is the heavy-weight metadata structure that is optimized for frequent metadata operations over long executions. To address this, we design new metadata structures for sanitizers, and propose FuZZan to automatically select the optimal metadata structure without any user configuration. Our new metadata structures have the same bug detection capabilities as the ones they replace. We implement and apply these ideas to Address Sanitizer (ASan), which is the most popular sanitizer.  Our evaluation shows that on the Google fuzzer test suite, FuZZan improves fuzzing throughput over ASan by 48% starting with Google’s provided seeds (52% when starting with empty seeds on the same applications). Due to this improved throughput, FuZZan discovers 13% more unique paths given the same 24 hours and finds bugs 42% faster. Furthermore, FuZZan catches all bugs ASan does; i.e., we have not traded precision for performance. Our findings show that sanitizer performance overhead is avoidable when metadata structures are designed for fuzzing, and that the performance difference will have a meaningful difference in squashing software bugs.",
    "link": "https://www.usenix.org/conference/atc20/presentation/jeon",
    "session_title": "The Buggy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "PracExtractor: Extracting Configuration Good Practices from Manuals to Detect Server Misconfigurations",
    "authors": "Chengcheng Xiang and Haochen Huang,University of California San Diego;Andrew Yoo,University of Illinois at Urbana-Champaign;Yuanyuan Zhou,University of California, San Diego;Shankar Pasupathy,NetApp",
    "abstract": "Configuration has become ever so complex and error-prone in today’s server software. To mitigate this problem, software vendors provide user manuals to guide system admins on configuring their systems. Usually, manuals describe not only the meaning of configuration parameters but also good practice recommendations on how to configure certain parameters. Unfortunately, manuals usually also have a large number of pages, which are time-consuming for humans to read and understand. Therefore, system admins often do not refer to manuals but rely on their own guesswork or unreliable sources when setting up systems, which can lead to configuration errors and system failures.\nTo understand the characteristics of configuration recommendations in user manuals, this paper first collected and studied 261 recommendations from the manuals of six large open-source systems. Our study shows that 60% of the studied recommendations describe specific and checkable specifications instead of merely general guidance. Moreover, almost all (97%) of such specifications have not been checked in the systems' source code, and 61% of them are not equivalent to the default settings. This implies that additional checking is needed to ensure the recommendations are correctly applied.\nBased on our characteristic study, we build a tool called PracExtractor, which employs Natural Language Processing (NLP) techniques to automatically extract configuration recommendations from software manuals, converts them into specifications, and then uses the generated specifications to detect violations in system admins’ configuration settings. We evaluate PracExtractor with twelve widely-deployed software systems, including one large commercial system from a public company. In total, PracExtractor automatically extracts 338 recommendations and generates 173 specifications with reasonable accuracy. With these generated specifications, PracExtractor detects 1423 good practice violations from open-source docker images. To this day, we have reported 325 violations and have got 47 of them confirmed as real configuration issues by admins from different organizations.",
    "link": "https://www.usenix.org/conference/atc20/presentation/xiang",
    "session_title": "The Buggy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Reverse Debugging of Kernel Failures in Deployed Systems",
    "authors": "Xinyang Ge,Microsoft Research;Ben Niu,Microsoft;Weidong Cui,Microsoft Research",
    "abstract": "Post-mortem diagnosis of kernel failures is crucial for operating system vendors because kernel failures impact the reliability and security of the whole system.  However, debugging kernel failures in deployed systems remains a challenge because developers have to speculate the conditions leading to the failure based on limited information such as memory dumps.  In this paper, we present Kernel REPT, the first practical reverse debugging solution for kernel failures that is highly efficient, imposes small memory footprint and requires no extra software layer.  To meet this goal, Kernel REPT employs efficient hardware tracing to record the kernel's control flow on each processor, recognizes the control flow of each software thread based on the context switch history, and recovers its data flow by emulating machine instructions and hardware events such as interrupts and exceptions.  We design, implement, and deploy Kernel REPT on Microsoft Windows.  We show that developers can use Kernel REPT to do interactive reverse debugging and find the root cause of real-world kernel failures.  Kernel REPT also enables automatic root-cause analysis for certain kernel failures that were hard to debug even manually.  Furthermore, Kernel REPT can proactively identify kernel bugs by checking the reconstructed execution history against a set of predetermined invariants.",
    "link": "https://www.usenix.org/conference/atc20/presentation/ge",
    "session_title": "The Buggy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Offload Annotations: Bringing Heterogeneous Computing to Existing Libraries and Workloads",
    "authors": "Gina Yuan, Shoumik Palkar, Deepak Narayanan, and Matei Zaharia,Stanford University",
    "abstract": "As specialized hardware accelerators such as GPUs become increasingly popular, developers are looking for ways to target these platforms with high-level APIs. One promising approach is kernel libraries such as PyTorch or cuML, which provide interfaces that mirror CPU-only counterparts such as NumPy or Scikit-Learn. Unfortunately, these libraries are hard to develop and to adopt incrementally: they only support a subset of their CPU equivalents, only work with datasets that fit in device memory, and require developers to reason about data placement and transfers manually. To address these shortcomings, we present a new approach called offload annotations (OAs) that enables heterogeneous GPU computing in existing workloads with few or no code modifications. An annotator annotates the types and functions in a CPU library with equivalent kernel library functions and provides an offloading API to specify how the inputs and outputs of the function can be partitioned into chunks that fit in device memory and transferred between devices. A runtime then maps existing CPU functions to equivalent GPU kernels and schedules execution, data transfers and paging. In data science workloads using CPU libraries such as NumPy and Pandas, OAs enable speedups of up to 1200x and a median speedup of 6.3x by transparently offloading functions to a GPU using existing kernel libraries. In many cases, OAs match the performance of handwritten heterogeneous implementations. Finally, OAs can automatically page data in these workloads to scale to datasets larger than GPU memory, which would need to be done manually with most current GPU libraries.",
    "link": "https://www.usenix.org/conference/atc20/presentation/yuan",
    "session_title": "The Buggy One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "The Fine Line between Bold and Fringe Lunatic",
    "authors": "",
    "abstract": "Inaugural USENIX Lifetime Award Keynote",
    "link": "https://www.usenix.org/conference/atc20/presentation/keynote-seltzer",
    "session_title": "Keynote Address",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "HetPipe: Enabling Large DNN Training on (Whimpy) Heterogeneous GPU Clusters through Integration of Pipelined Model Parallelism and Data Parallelism",
    "authors": "Jay H. Park, Gyeongchan Yun, Chang M. Yi, Nguyen T. Nguyen, and Seungmin Lee,UNIST;Jaesik Choi,KAIST;Sam H. Noh and Young-ri Choi,UNIST",
    "abstract": "Deep Neural Network (DNN) models have continuously been growing in size in order to improve the accuracy and quality of the models. Moreover, for training of large DNN models, the use of heterogeneous GPUs is inevitable due to the short release cycle of new GPU architectures. In this paper, we investigate how to enable training of large DNN models on a heterogeneous GPU cluster that possibly includes whimpy GPUs that, as a standalone, could not be used for training. We present a DNN training system, HetPipe (Heterogeneous Pipeline), that integrates pipelined model parallelism (PMP) with data parallelism (DP). In HetPipe, a group of multiple GPUs, called a virtual worker, processes minibatches in a pipelined manner, and multiple such virtual workers employ data parallelism for higher performance. We also propose a novel parameter synchronization model, which we refer to as Wave Synchronous Parallel (WSP) to accommodate both PMP and DP for virtual workers, and provide convergence proof of WSP. Our experimental results on a given heterogeneous setting show that with HetPipe, DNN models converge up to 49% faster compared to the state-of-the-art DP technique.",
    "link": "https://www.usenix.org/conference/atc20/presentation/park",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "AutoSys: The Design and Operation of Learning-Augmented Systems",
    "authors": "Chieh-Jan Mike Liang, Hui Xue, Mao Yang, and Lidong Zhou,Microsoft Research;Lifei Zhu,Peking University and Microsoft Research;Zhao Lucis Li and Zibo Wang,University of Science and Technology of China and Microsoft Research;Qi Chen and Quanlu Zhang,Microsoft Research;Chuanjie Liu,Microsoft Bing Platform;Wenjun Dai,Microsoft Bing Ads",
    "abstract": "Although machine learning (ML) and deep learning (DL) provide new possibilities into optimizing system design and performance, taking advantage of this paradigm shift requires more than implementing existing ML/DL algorithms. This paper reports our years of experience in designing and operating several production learning-augmented systems at Microsoft. AutoSys is a framework that unifies the development process, and it addresses common design considerations including ad-hoc and nondeterministic jobs, learning-induced system failures, and programming extensibility. Furthermore, this paper demonstrates the benefits of adopting AutoSys with measurements from one production system, Web Search. Finally, we share long-term lessons stemmed from unforeseen implications that have surfaced over the years of operating learning-augmented systems.",
    "link": "https://www.usenix.org/conference/atc20/presentation/liang-mike",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Daydream: Accurately Estimating the Efficacy of Optimizations for DNN Training",
    "authors": "Hongyu Zhu,University of Toronto & Vector Institute;Amar Phanishayee,Microsoft Research;Gennady Pekhimenko,University of Toronto & Vector Institute",
    "abstract": "Modern deep neural network (DNN) training uses a complex software/hardware stack used by machine learning (ML) practitioners are often heterogeneous. The efficacy of software-level optimizations can vary significantly when applied to different configurations. It is onerous and error-prone for ML practitioners and system developers to implement each optimization separately, and determine which ones will improve performance in their own configurations.  Unfortunately, existing profiling tools do not aim to answer predictive questions such as \"How will optimization X affect the performance of my model?\". This paper addresses this critical limitation, and proposes a new profiling tool, Daydream, to help programmers efficiently explore the efficacy of DNN optimizations. Daydream models DNN execution with a fine-grained dependency graph based on low-level traces collected by CUPTI, and predicts runtime by simulating execution based on the dependency graph. Daydream maps the low-level traces using DNN domain-specific knowledge, and introduces a set of graph-transformation primitives that can easily model a wide variety of optimizations. We show that Daydream is able to model most mainstream DNN optimization techniques, and accurately predict the efficacy of optimizations that will result in significant performance improvements.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhu-hongyu",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "ALERT: Accurate Learning for Energy and Timeliness",
    "authors": "Chengcheng Wan, Muhammad Santriaji, Eri Rogers, Henry Hoffmann, Michael Maire, and Shan Lu,University of Chicago",
    "abstract": "An increasing number of software applications incorporate runtime Deep Neural Networks (DNNs) to process sensor data and return inference results to humans. Effective deployment of DNNs in these  interactive  scenarios  requires  meeting latency and accuracy constraints while minimizing energy, a problem exacerbated by common system dynamics.\nPrior approaches handle dynamics through either (1) system-oblivious DNN adaptation,  which adjusts DNN latency/accuracy  tradeoffs, or (2) application-oblivious system adaptation, which adjusts resources to change latency/energy  tradeoffs.  In contrast, this  paper improves on the  state-of-the-art by coordinating application- and system-level adaptation.  ALERT,  our runtime scheduler, uses a probabilistic model to detect environmental volatility and then simultaneously select both a DNN and a system resource configuration to meet latency, accuracy, and energy constraints. We evaluate ALERT on CPU and GPU platformsfor image and speech tasks in dynamic environments. ALERT’s holistic approach achieves more than 13% energy reduction, and 27% error reduction over prior approaches that adapt solely at the application or system level. Furthermore, ALERT incurs only 3% more energy consumption and 2% higher DNN-inference error than an oracle scheme with perfect application and system knowledge",
    "link": "https://www.usenix.org/conference/atc20/presentation/wan",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "NeuOS: A Latency-Predictable Multi-Dimensional Optimization Framework for DNN-driven Autonomous Systems",
    "authors": "Soroush Bateni and Cong Liu,University of Texas at Dallas",
    "abstract": "Deep neural networks (DNNs) used in computed vision have become widespread techniques commonly used in autonomous embedded systems for applications such as image/object recognition and tracking. The stringent space, weight, and power constraints seen in such systems impose a major impediment for practical and safe implementation of DNNs, because they have to be latency predictable while ensuring minimum energy consumption and maximum accuracy. Unfortunately, exploring this optimization space is very challenging because (1) smart coordination has to be performed among system- and application-level solutions, (2) layer characteristics should be taken into account, and more importantly, (3) when multiple DNNs exist, a consensus on system configurations should be calculated, which is a problem that is an order of magnitude harder than any previously considered scenario. In this paper, we present NeuOS, a comprehensive latency predictable system solution for running multi-DNN workloads in autonomous systems. NeuOS can guarantee latency predictability, while managing energy optimization and dynamic accuracy adjustment based on specific system constraints via smart coordinated system- and application-level decision-making among multiple DNN instances. We implement and extensively evaluate NeuOS on two state-of-the-art autonomous system platforms for a set of popular DNN models. Experiments show that NeuOS rarely misses deadlines, and can improve energy and accuracy considerably compared to state of the art.",
    "link": "https://www.usenix.org/conference/atc20/presentation/bateni",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "PERCIVAL: Making In-Browser Perceptual Ad Blocking Practical with Deep Learning",
    "authors": "Zainul Abi Din,UC Davis;Panagiotis Tigas,University of Oxford;Samuel T. King,UC Davis, Bouncer Technologies;Benjamin Livshits,Brave Software, Imperial College London",
    "abstract": "In this paper we present PERCIVAL, a browser-embedded, lightweight, deep learning-powered ad blocker. PERCIVAL embeds itself within the browser’s image rendering pipeline, which makes it possible to intercept every image obtained during page execution and to perform image classification based blocking to flag potential ads. Our  implementation  inside  both  Chromium  and  Brave browsers shows only a minor rendering performance overhead of 4.55%, for Chromium, and 19.07%, for Brave browser, demonstrating the feasibility of deploying traditionally heavy models (i.e. deep neural networks) inside the critical path of  the  rendering  engine  of  a  browser.  We  show  that  our image-based ad blocker can  replicate  EasyList rules  with an   accuracy  of  96.76%.   Additionally, PERCIVAL does surprisingly  well  on  ads  in  languages  other than  English and  also  performs  well  on  blocking  first-party  Facebook ads, which have presented issues for rule-based ad blockers. PERCIVAL proves that image-based perceptual ad blocking is an attractive complement to today’s dominant approach of block lists.",
    "link": "https://www.usenix.org/conference/atc20/presentation/din",
    "session_title": "The Machine Learning One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Harmonizing Performance and Isolation in Microkernels with Efficient Intra-kernel Isolation and Communication",
    "authors": "Jinyu Gu, Xinyue Wu, Wentai Li, Nian Liu, Zeyu Mi, Yubin Xia, and Haibo Chen,Shanghai Jiao Tong University",
    "abstract": "This paper presents UnderBridge, a redesign of traditional microkernel OSes to harmonize the tension between messaging performance and isolation. UnderBridge moves the OS components of a microkernel between user space and kernel space at runtime while enforcing consistent isolation. It retroﬁts Intel Memory Protection Key for Userspace (PKU) in kernel space to achieve such isolation efﬁciently and design a fast IPC mechanism across those OS components. Thanks to PKU’s extremely low overhead, the inter-process communication (IPC) roundtrip cost in UnderBridge can be as low as 109 cycles. We have designed and implemented a new microkernel called ChCore based on UnderBridge and have also ported UnderBridge to three mainstream microkernels, i.e., seL4, Google Zircon, and Fiasco.OC. Evaluations show that UnderBridge speeds up the IPC by 3.0× compared with the state-of-the-art (e.g., SkyBridge) and improves the performance of IPC-intensive applications by up to 13.1× for the above three microkernels.",
    "link": "https://www.usenix.org/conference/atc20/presentation/gu",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Faasm: Lightweight Isolation for Efficient Stateful Serverless Computing",
    "authors": "Simon Shillaker and Peter Pietzuch,Imperial College London",
    "abstract": "Serverless computing is an excellent fit for big data processing because it\ncan scale quickly and cheaply to thousands of parallel functions. Existing\nserverless platforms isolate functions in ephemeral, stateless containers,\npreventing them from directly sharing memory. This forces users to duplicate\nand serialise data repeatedly, adding unnecessary performance and resource\ncosts. We believe that a new lightweight isolation approach is needed, which\nsupports sharing memory directly between functions and reduces resource\noverheads.\nWe introduceFaaslets, a new isolation abstraction for\nhigh-performance serverless computing. Faaslets isolate the memory of\nexecuted functions using \\emph{software-fault isolation} (SFI), as provided byWebAssembly, while allowing memory regions to be shared between\nfunctions in the same address space. Faaslets can thus avoid expensive data\nmovement when functions are co-located on the same machine. Our runtime for\nFaaslets, Faasm, isolates other resources, e.g. CPU and network, using standard\nLinuxcgroups, and provides a low-level POSIX host interface for\nnetworking, file system access and dynamic loading. To reduce initialisation\ntimes, Faasm restores Faaslets from already-initialised snapshots. We compare\nFaasm to a standard container-based platform and show that, when training a\nmachine learning model, it achieves a 2× speed-up with 10× less\nmemory; for serving machine learning inference, Faasm doubles the throughput\nand reduces tail latency by 90%.",
    "link": "https://www.usenix.org/conference/atc20/presentation/shillaker",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Fewer Cores, More Hertz: Leveraging High-Frequency Cores in the OS Scheduler for Improved Application Performance",
    "authors": "Redha Gouicem and Damien Carver,Sorbonne University, LIP6, Inria;Jean-Pierre Lozi,Oracle Labs;Julien Sopena,Sorbonne University, LIP6, Inria;Baptiste Lepers and Willy Zwaenepoel,University of Sydney;Nicolas Palix,Université Grenoble Alpes;Julia Lawall and Gilles Muller,Inria, Sorbonne University, LIP6",
    "abstract": "In modern server CPUs, individual cores can run at different frequencies, which allows for fine-grained control of the performance/energy tradeoff. Adjusting the frequency, however, incurs a high latency. We find that this can lead to a problem of frequency inversion, whereby the Linux scheduler places a newly active thread on an idle core that takes dozens to hundreds of milliseconds to reach a high frequency, just before another core already running at a high frequency becomes idle.\nIn this paper, we first illustrate the significant performance overhead of repeated frequency inversion through a case study of scheduler behavior during the compilation of the Linux kernel on an 80-core Intel Xeon-based machine. Following this, we propose two strategies to reduce the likelihood of frequency inversion in the Linux scheduler. When benchmarked over 60 diverse applications on the Intel Xeon, the better performing strategy,Smove, improves performance by more than 5% (at most 56% with no energy overhead) for 23 applications, and worsens performance by more than 5% (at most 8%) for only 3 applications. On a 4-core AMD Ryzen we obtain performance improvements up to 56%.",
    "link": "https://www.usenix.org/conference/atc20/presentation/gouicern",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "vSMT-IO: Improving I/O Performance and Efficiency on SMT Processors in Virtualized Clouds",
    "authors": "Weiwei Jia,New Jersey Institute of Technology;Jianchen Shan,Hofstra University;Tsz On Li,University of Hong Kong;Xiaowei Shang,New Jersey Institute of Technology;Heming Cui,University of Hong Kong;Xiaoning Ding,New Jersey Institute of Technology",
    "abstract": "The paper focuses on an under-studied yet fundamental issue on Simultaneous Multi-Threading (SMT) processors — how to schedule I/O workloads, so as to improve I/O performance and efficiency. The paper shows that existing techniques used by CPU schedulers to improve I/O performance are inefficient on SMT processors, because they incur excessive context switches and spinning when workloads are waiting for I/O events. Such inefficiency makes it difficult to achieve high CPU throughput and high I/O throughput, which are required by typical workloads in the clouds with both intensive I/O operations and heavy computation.\nThe paper proposes to use context retention as a key technique to improve I/O performance and efficiency on SMT processors. Context retention uses a hardware thread to hold the context of an I/O workload waiting for I/O events, such that overhead of context switches and spinning can be eliminated, and the workload can quickly respond to I/O events. Targeting virtualized clouds and x86 systems, the paper identifies the technical issues in implementing context retention in real systems, and explores effective techniques to address these issues, including long term context retention and retention-aware symbiotic scheduling.\nThe paper designs vSMT-IO to implement the idea and the techniques. Extensive evaluation based on the prototype implementation in KVM and diverse real-world applications, such as DBMS, web servers, AI workload, and Hadoop jobs, shows that vSMT-IO can improve I/O throughput by up to\n88.3% and CPU throughput by up to 123.1%.",
    "link": "https://www.usenix.org/conference/atc20/presentation/jia",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Lightweight Preemptible Functions",
    "authors": "Sol Boucher,Carnegie Mellon University;Anuj Kalia,Microsoft Research;David G. Andersen,Carnegie Mellon University;Michael Kaminsky,BrdgAI / Carnegie Mellon University",
    "abstract": "Lamenting the lack of a natural userland abstraction for preemptive interruption and asynchronous cancellation, we propose lightweight preemptible functions, a mechanism for synchronously performing a function call with a precise timeout that is lightweight, efficient, and composable, all while being portable between programming languages. We present the design of libinger, a library that provides this abstraction, on top of which we build libturquoise, arguably the first general-purpose and backwards-compatible preemptive thread library implemented entirely in userland. Finally, we demonstrate this software stack’s applicability to and performance on the problems of combatting head-of-line blocking and time-based DoS attacks.",
    "link": "https://www.usenix.org/conference/atc20/presentation/boucher",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "coIOMMU: A Virtual IOMMU with Cooperative DMA Buffer Tracking for Efficient Memory Management in Direct I/O",
    "authors": "Kun Tian, Yu Zhang, Luwei Kang, Yan Zhao, and Yaozu Dong,Intel Corporation",
    "abstract": "Direct assignment of I/O devices (Direct I/O) is the best performant I/O virtualization method. However, it requires the hypervisor to statically pin the entire guest memory, thereby hindering the efficiency of memory management. This problem can be fixed by presenting a virtual IOMMU (vIOMMU). Emulation of its DMA remapping capability carries sufficient information about guest DMA buffers, allowing the hypervisor to do fine-grained pinning of guest memory. However, established vIOMMUs are not widely used by commodity guests due to the emulation cost, thus cannot reliably eliminate static pinning in direct I/O.\nWe propose and implement coIOMMU, a new vIOMMU architecture for efficient memory management with a cooperative DMA buffer tracking mechanism. The new mechanism provides a dedicated interface for hypervisor and guest to exchange DMA buffer information over a shared DMA tracking table (DTT), orthogonal to the costly DMA remapping interface. We also explore two techniques: smart pinning and lazy unpinning, to minimize the impact on the performance of direct I/O. Our evaluation results show that coIOMMU dramatically improves the efficiency of memory management in wide direct I/O usages with negligible cost. Moreover, the desired semantics of DMA remapping can be sustained when cooperative tracking is enabled alongside. Overall, we believe that coIOMMU can serve as a reliable solution for efficient memory management in direct I/O.",
    "link": "https://www.usenix.org/conference/atc20/presentation/tian",
    "session_title": "The OS and Virtualization One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "BatchCrypt: Efficient Homomorphic Encryption for Cross-Silo Federated Learning",
    "authors": "Chengliang Zhang, Suyi Li, Junzhe Xia, and Wei Wang,Hong Kong University of Science and Technology;Feng Yan,University of Nevada, Reno;Yang Liu,WeBank",
    "abstract": "Cross-silo federated learning (FL) enables organizations (e.g., financial, or medical) to collaboratively train a machine learning model by aggregating local gradient updates from each client without sharing privacy-sensitive data. To ensure no update is revealed during aggregation, industrial FL frameworks allow clients to mask local gradient updates using additively homomorphic encryption (HE). However, this results in significant cost in computation and communication. In our characterization, HE operations dominate the training time, while inflating the data transfer amount by two orders of magnitude. In this paper, we present BatchCrypt, a system solution for cross-silo FL that substantially reduces the encryption and communication overhead caused by HE. Instead of encrypting individual gradients with full precision, we encode a batch of quantized gradients into a long integer and encrypt it in one go. To allow gradient-wise aggregation to be performed on ciphertexts of the encoded batches, we develop new quantization and encoding schemes along with a novel gradient clipping technique. We implemented BatchCrypt as a plug-in module in FATE, an industrial cross-silo FL framework. Evaluations with EC2 clients in geo-distributed datacenters show that BatchCrypt achieves 23X-93X training speedup while reducing the communication overhead by 66X-101X. The accuracy loss due to quantization errors is less than 1%.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhang-chengliang",
    "session_title": "The WAN One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "A Deep Dive into DNS Query Failures",
    "authors": "Donghui Yang,Institute of Computing Technology, Chinese Academy of Sciences;Zhenyu Li,Institute of Computing Technology, Chinese Academy of Sciences, and Purple Mountain Laboratories;Gareth Tyson,Queen Mary University of London",
    "abstract": "The Domain Name System (DNS) is fundamental to the operation of the Internet. Failures within DNS can have a dramatic impact on the wider Internet, most notably preventing access to any services dependent on domain names (e.g. web, mobile apps). Although there have been several studies into DNS utilization, we argue that greater focus should be placed on understanding \\emph{how} and \\emph{why} DNS queries fail in-the-wild. In this paper, we perform the largest ever study into DNS activity, covering 3B queries. We find that 13.5% of DNS queries fail, and this leads us to explore the root causes. We observe significant differences between IPv4 and IPv6 lookups. A handful of domains that have high failure rates attract a huge volume of queries, and thus dominate the failures. This is particularly the case for domains that are classified as malicious. The success rates also vary greatly across resolvers due to the differences in the domains that they serve and the infrastructure reliability.",
    "link": "https://www.usenix.org/conference/atc20/presentation/yang",
    "session_title": "The WAN One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "A Decentralized Blockchain with High Throughput and Fast Confirmation",
    "authors": "Chenxing Li, Peilun Li, and Dong Zhou,Tsinghua University;Zhe Yang, Ming Wu, and Guang Yang,Conflux Foundation;Wei Xu,Tsinghua University;Fan Long,University of Toronto and Conflux Foundation;Andrew Chi-Chih Yao,Tsinghua University",
    "abstract": "This paper presents Conflux, a scalable and decentralized blockchain system with high throughput and fast confirmation. Conflux operates with a novel consensus protocol which optimistically processes concurrent blocks without discarding any as forks and adaptively assigns weights to blocks based on their topologies in the Conflux ledger structure (called Tree-Graph). The adaptive weight mechanism enables Conflux to detect and thwart liveness attack by automatically switching between an optimistic strategy for fast confirmation in normal scenarios and a conservative strategy to ensure consensus progress during liveness attacks. We evaluated Conflux on Amazon EC2 clusters with up to 12k full nodes. The consensus protocol of Conflux achieves a block throughput of 9.6Mbps with 20Mbps network bandwidth limit per node. On a combined workload of payment transactions and Ethereum history transactions, the end-to-end system of Conflux achieves the throughput of up to 3480 transactions per second while confirming transactions under one minute.",
    "link": "https://www.usenix.org/conference/atc20/presentation/li-chenxing",
    "session_title": "The WAN One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Reconstructing proprietary video streaming algorithms",
    "authors": "Maximilian Grüner, Melissa Licciardello, and Ankit Singla,ETH Zürich",
    "abstract": "Even though algorithms for adaptively setting video quality in online streaming are a hot topic in networking academia, little is known about how popular online streaming platforms do such adaptation. This creates obvious hurdles for research on streaming algorithms and their interactions with other network traffic and control loops like that of transport and traffic throttling. To address this gap, we pursue an ambitious goal: reconstruction of unknown proprietary video streaming algorithms. Instead of opaque reconstruction through,e.g.,neural networks, we seek reconstructions that are easily understandable and open to inspection by domain experts. Such reconstruction, if successful, would also shed light on the risk of competitors copying painstakingly engineered algorithmic work simply by interacting with popular services.\nOur reconstruction approach uses logs of player and network state and observed player actions across varied network traces and videos, to learn decision trees across streaming-specific engineered features. We find that of 10 popular streaming platforms, we can produce easy-to-understand, and high-accuracy reconstructions for 7 using concise trees with no more than 20 rules. We also discuss the utility of such interpretable reconstruction through several examples.",
    "link": "https://www.usenix.org/conference/atc20/presentation/gruener",
    "session_title": "The WAN One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Midgress-aware traffic provisioning for content delivery",
    "authors": "Aditya Sundarrajan,University of Massachusetts Amherst;Mangesh Kasbekar,Akamai Technologies;Ramesh K. Sitaraman,University of Massachusetts Amherst & Akamai Technologies;Samta Shukla,CVS Health",
    "abstract": "Content delivery networks (CDNs) cache and deliver hundreds of trillions of user requests each day from hundreds of thousands of servers around the world. The traffic served by CDNs can be partitioned into hundreds of traffic classes, each with different user access patterns, popularity distributions, object sizes, and performance requirements. Midgress is the cache miss traffic between the CDN's servers and the content provider origins. A major goal of a CDN is to minimize its midgress, since higher midgress translates to higher bandwidth costs and increased user-perceived latency. \n \nWe propose algorithms that provision traffic classes to servers such that midgress is minimized. Using extensive traces from Akamai's CDN, we show that our midgress-aware traffic provisioning schemes can reduce midgress by nearly 20% in comparison with the midgress-unaware schemes currently in use. We also propose an efficient heuristic for traffic provisioning that achieves near-optimal midgress and is suitable for use in production settings. Further, we show how our algorithms can be extended to other settings that require minimum caching performance per traffic class and minimum content duplication for fault tolerance. Finally, our paper provides a strong case for implementing midgress-aware traffic provisioning in production CDNs.",
    "link": "https://www.usenix.org/conference/atc20/presentation/sundarrajan",
    "session_title": "The WAN One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "GraphWalker: An I/O-Efficient and Resource-Friendly Graph Analytic System for Fast and Scalable Random Walks",
    "authors": "Rui Wang and Yongkun Li,University of Science and Technology of China;Hong Xie,Chongqing University;Yinlong Xu,University of Science and Technology of China;John C. S. Lui,The Chinese University of Hong Kong",
    "abstract": "Traditional graph systems mainly use the iteration-based model which iteratively loads graph blocks into memory for analysis so as to reduce random I/Os. However, this iterationbased model limits the efficiency and scalability of running random walk, which is a fundamental technique to analyze large graphs. In this paper, we propose GraphWalker, an I/O-efficient graph system for random walks by deploying a novel state-aware I/O model with asynchronous walk updating. GraphWalker is efficient to handle very large diskresident graphs consisting of hundreds of billions of edges with only a single commodity machine, and it is also scalable to run tens of billions of random walks with thousands of steps long. Experiments on our prototype system show that GraphWalker can achieve more than an order of magnitude speedup when running a large amount of long random walks when compared with DrunkardMob, which is tailored for random walk based on the classical system GraphChi, as well as two state-of-the-art single-machine graph systems, Graphene and GraFSoft. Furthermore, comparing with the most recent distributed system KnightKing, which optimizes for random walks and runs on cluster machines, GraphWalker achieves comparable performance with only a single machine, thereby making it a more cost-effective alternative.",
    "link": "https://www.usenix.org/conference/atc20/presentation/wang-rui",
    "session_title": "The One About Big Data",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Scaph: Scalable GPU-Accelerated Graph Processing with Value-Driven Differential Scheduling",
    "authors": "Long Zheng, Xianliang Li, Yaohui Zheng, Yu Huang, Xiaofei Liao, and Hai Jin,Huazhong University of Science and Technology;Jingling Xue,UNSW Sydney;Zhiyuan Shao and Qiang-Sheng Hua,Huazhong University of Science and Technology",
    "abstract": "We introduce Scaph, a GPU-accelerated graph system that achieves scale-up graph processing on large-scale graphs that are initially partitioned into subgraphs at the host to enable iterative graph computations on the sub-graphs on the GPU. For active subgraphs to be processed on GPU at an iteration, the prior work always streams each in its entirety to GPU, even though only the neighboring information for its active vertices will ever be used. In contrast, Scaph boosts performance significantly by reducing the amount of such redundant data transferred, thereby improving drastically the effective utilization of the host-GPU bandwidth. The key novelty of Scaph is to classify adaptively at each iteration whether a subgraph is a high-value subgraph (if it is likely to be traversed extensively in the current and future iterations) or a low-value subgraph (otherwise). Scaph then schedules a sub-graph for graph processing on GPU using two graph processing engines, one for high-value subgraphs, which will be streamed to GPU entirely and iterated over repeatedly, one for low-value subgraphs, for which only the neighboring information needed for its active vertices is transferred. Evaluation on real-world and synthesized large-scale graphs shows that Scaph outperforms the state-of-the-art, Totem (4.12×), Graphie (8.93×) and Garaph (3.71×), on average.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zheng",
    "session_title": "The One About Big Data",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Peregreen – modular database for efficient storage of historical time series in cloud environments",
    "authors": "Alexander Visheratin, Alexey Struckov, Semen Yufa, Alexey Muratov, Denis Nasonov, and Nikolay Butakov,ITMO University;Yury Kuznetsov and Michael May,Siemens",
    "abstract": "The rapid development of scientific and industrial areas, which rely on time series data processing, raises the demand for storage that would be able to process tens and hundreds of terabytes of data efficiently. And by efficiency, one should understand not only the speed of data processing operations execution but also the volume of the data stored and operational costs when deploying the storage in a production environment such as the cloud. In this paper, we propose a concept for storing and indexing numerical time series that allows creating compact data representations optimized for cloud storages and perform typical operations - uploading, extracting, sampling, statistical aggregations, and – at high speed. Our modular database that implements the proposed approach – Peregreen – can achieve a throughput of 3 million entries per second for uploading and 48 million entries per second for extraction in Amazon EC2 while having only Amazon S3 as backend storage for all the data.",
    "link": "https://www.usenix.org/conference/atc20/presentation/visheratin",
    "session_title": "The One About Big Data",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "AC-Key: Adaptive Caching for LSM-based Key-Value Stores",
    "authors": "Fenggang Wu, Ming-Hong Yang, Baoquan Zhang, and David H.C. Du,University of Minnesota",
    "abstract": "Read performance of LSM-tree-based Key-Value Stores suffers from serious read amplification caused by the leveled structure used to improve write performance. Caching is one of the main techniques to improve the performance of read operations. Designing an efficient caching algorithm is challenging because the leveled structure obscures the cost and benefit of caching a particular key, and the trade-off between point lookup and range query operations further complicates the cache replacement decisions. We propose AC-Key, an Adaptive Caching enabled Key-Value Store to address these challenges. AC-Key manages three different caching components, namely key-value cache, key-pointer cache, and block cache, and adjust their sizes according to the workload. AC-Key leverages a novel caching efficiency factor to capture the heterogeneity of the caching costs and benefits of cached entries. We implement AC-Key by modifying RocksDB. The evaluation results show that the performance of AC-Key is higher than that of RocksDB in various workloads and is even better than the best offline fix-sized caching scheme in phase-change workloads.",
    "link": "https://www.usenix.org/conference/atc20/presentation/wu-fenggang",
    "session_title": "The One About Big Data",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "POSH: A Data-Aware Shell",
    "authors": "Deepti Raghavan, Sadjad Fouladi, Philip Levis, and Matei Zaharia,Stanford University",
    "abstract": "We present POSH, a framework that accelerates shell applications with I/O-heavy components, such as data analytics with command-line utilities. Remote storage such as networked filesystems can severely limit the performance of these applications: data makes a round trip over the network for relatively little computation at the client.\nReducing the data movement by moving the code to the data can improve performance.\nPOSH automatically optimizesunmodifiedI/O-intensive shell applications running over remote storage by offloading the I/O-intensive portions to proxy\nservers closer to the data. A proxy can run directly on a storage server, or on a machine closer to the storage layer than the client. POSH intercepts shell pipelines and uses metadata calledannotationsto decide where to run each command within the pipeline. We address three principal challenges that arise: an annotation language that allows POSH to understand which files a command will access, a scheduling algorithm that places commands to minimize data movement, and a system runtime to execute a distributed schedule but retain local semantics.\nWe benchmark POSH on real shell pipelines such as image processing, network security analysis, log analysis, distributed system debugging, and git. We find that POSH provides speedups ranging from 1.6× to 15× compared to NFS, without requiring any modifications to the applications.",
    "link": "https://www.usenix.org/conference/atc20/presentation/raghavan",
    "session_title": "The One About Big Data",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "FineStream: Fine-Grained Window-Based Stream Processing on CPU-GPU Integrated Architectures",
    "authors": "Feng Zhang and Lin Yang,Renmin University of China;Shuhao Zhang,Technische Universität Berlin and National University of Singapore;Bingsheng He,National University of Singapore;Wei Lu and Xiaoyong Du,Renmin University of China",
    "abstract": "Accelerating SQL queries on stream processing by utilizing heterogeneous coprocessors, such as GPUs, has shown to be an effective approach. Most works show that heterogeneous processors bring significant performance improvement because of their high parallelism and computation capacity. However, the discrete memory architectures with relatively low PCI-e bandwidth and high latency have dragged down the benefits of heterogeneous coprocessors. Recently, hardware vendors propose CPU-GPU integrated architectures that integrate CPU and GPU on the same chip. This integration provides new opportunities for fine-grained cooperation be-tween CPU and GPU for optimizing SQL queries on stream processing. In this paper, we propose a data stream system, called FineStream, for efficient window-based stream pro-cessing on integrated architectures. Particularly, FineStreamperforms fine-grained workload scheduling between CPU and GPU to take advantage of both architectures, and also targets at dynamic stream query co-processing with window handling. Our experimental results show that 1) on integrated architectures, FineStream achieves an average 52% throughput improvement and 36% lower latency over the state-of-the-art stream processing engine; 2) compared to the stream processing engine on the discrete architecture, FineStream on the integrated architecture achieves 10.4x price-throughput ratio, 1.8x energy efficiency, and can enjoy lower latency benefits.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhang-feng",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "OpenExpress: Fully Hardware Automated Open Research Framework for Future Fast NVMe Devices",
    "authors": "Myoungsoo Jung,KAIST",
    "abstract": "NVMe is widely used by diverse types of storage and non-volatile memories subsystems as a de-facto fast I/O communication interface. Industries secure their own intellectual property (IP) for high-speed NVMe controllers and explore challenges of software stack with future fast NVMe storage cards. Unfortunately, such NVMe controller IPs are often inaccessible to academia. The research community, however, requires an open-source hardware framework to build new storage stack and controllers for the fast NVMe devices.\nIn this work, we present OpenExpress, a fully hardware automated framework that has no software intervention to process concurrent NVMe requests while supporting scalable data submission, rich outstanding I/O command queues, and submission/completion queue management. OpenExpress is available to download and offers a maximum bandwidth of around 7GB/s without a silicon fabrication.",
    "link": "https://www.usenix.org/conference/atc20/presentation/jung",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Fast Software Cache Design for Network Appliances",
    "authors": "Dong Zhou,Tsinghua University;Huacheng Yu,Princeton University;Michael Kaminsky,BrdgAI;David Andersen,BrdgAI and Carnegie Mellon University",
    "abstract": "The high packet rates handled by network appliances and similar software-based packet processing applications place a challenging load on caches such as flow caches. In these environments, both hit rate and cache hit latency are critical to throughput. Much recent work, however, has focused exclusively on one of these two desiderata, missing opportunities to further improve overall system throughput. This paper introduces Bounded Linear Probing (BLP), a new cache design optimized for network appliances that works well across different workloads and cache sizes by balancing between hit rate and lookup latency. To accompany BLP, we also present a new, lightweight cache eviction policy called Probabilistic Bubble LRU that achieves near-optimal cache hit rate without using any extra space. We provide three main contributions: a theoretical analysis of BLP, a comparison with existing and proposed cache designs using microbenchmarks, and an end-to-end evaluation of BLP in the popular Open vSwitch (OvS) system. Our end-to-end experiments show that BLP is effective in practice: replacing the microflow cache OvS with one based upon BLP improves throughput by up to 15%.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhou",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Reexamining Direct Cache Access to Optimize I/O Intensive Applications for Multi-hundred-gigabit Networks",
    "authors": "Alireza Farshin,KTH Royal Institute of Technology;Amir Roozbeh,KTH Royal Institute of Technology and Ericsson Research;Gerald Q. Maguire Jr. and Dejan Kostić,KTH Royal Institute of Technology",
    "abstract": "Memory access is the major bottleneck in realizing multi-hundred-gigabit networks with commodity hardware, hence it is essential to make good use of cache memory that is a faster, but smaller memory closer to the processor. Our goal is to study the impact of cache management on the performance of I/O intensive applications. Specifically, this paper looks at one of the bottlenecks in packet processing, i.e., direct cache access (DCA). We systematically studied the current implementation of DCA in Intel processors, particularly Data Direct I/O technology (DDIO), which directly transfers data between I/O devices and the processor's cache. Our empirical study enables system designers/developers to optimize DDIO-enabled systems for I/O intensive applications. We demonstrate that optimizing DDIO could reduce the latency of I/O intensive network functions running at 100 Gbps by up to ~30%. Moreover, we show that DDIO causes a 30% increase in tail latencies when processing packets at 200 Gbps, hence it is crucial to selectively inject data into the cache or to explicitly bypass it.",
    "link": "https://www.usenix.org/conference/atc20/presentation/farshin",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "sRDMA -- Efficient NIC-based Authentication and Encryption for Remote Direct Memory Access",
    "authors": "Konstantin Taranov, Benjamin Rothenberger, Adrian Perrig, and Torsten Hoefler,ETH Zurich",
    "abstract": "State-of-the-art remote direct memory access (RDMA) technologies have shown to be vulnerable against attacks by in-network adversaries, as they provide only a weak form of protection by including access tokens in each message. A network eavesdropper can easily obtain sensitive information and modify bypassing packets, affecting not only secrecy but also integrity. Tampering with packets can have drastic consequences. For example, when memory pages with code are changed remotely, altering packet contents enables remote code injection.  We propose sRDMA, a protocol that provides efficient authentication and encryption for RDMA to prevent information leakage and message tampering. sRDMA uses symmetric cryptography and employs network interface cards to perform cryptographic operations. Additionally, we provide an implementation for sRDMA using programmable network adapters.",
    "link": "https://www.usenix.org/conference/atc20/presentation/taranov",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "UREQA: Leveraging Operation-Aware Error Rates for Effective Quantum Circuit Mapping on NISQ-Era Quantum Computers",
    "authors": "Tirthak Patel, Baolin Li, Rohan Basu Roy, and Devesh Tiwari,Northeastern University",
    "abstract": "Noisy  Intermediate-Scale  Quantum  (NISQ)  computers are  enabling  development  and  evaluation  of  real quantum algorithms, but due to their highly erroneous nature,careful selection of qubits to map the algorithm on to real hardware is required to minimize the error rate of the algorithm output. In this paper, we propose UREQA, a new approach that introduces quantum-operation-aware error rate prediction to minimize of output errors of quantum algorithms running on NISQ devices.",
    "link": "https://www.usenix.org/conference/atc20/presentation/patel",
    "session_title": "The One About Acceleration",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Austere Flash Caching with Deduplication and Compression",
    "authors": "Qiuping Wang and Jinhong Li,The Chinese University of Hong Kong;Wen Xia,Harbin Institute of Technology, Shenzhen;Erik Kruus and Biplob Debnath,NEC Labs;Patrick P. C. Lee,The Chinese University of Hong Kong",
    "abstract": "Modern storage systems leverage flash caching to boost I/O performance, and enhancing the space efficiency and endurance of flash caching remains a critical yet challenging issue in the face of ever-growing data-intensive workloads. Deduplication and compression are promising data reduction techniques for storage and I/O savings via the removal of duplicate content, yet they also incur substantial memory overhead for index management. We propose AustereCache, a new flash caching design that aims for memory-efficient indexing, while preserving the data reduction benefits of deduplication and compression. AustereCache emphasizes austere cache management and proposes different core techniques for efficient data organization and cache replacement, so as to eliminate as much indexing metadata as possible and make lightweight in-memory index structures viable. Trace-driven experiments show that our AustereCache prototype saves 69.9-97.0% of memory usage compared to the state-of-the-art flash caching design that supports deduplication and compression, while maintaining comparable read hit ratios and write reduction ratios and achieving high I/O throughput.",
    "link": "https://www.usenix.org/conference/atc20/presentation/wang-qiuping",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "DADI: Block-Level Image Service for Agile and Elastic Application Deployment",
    "authors": "Huiba Li, Yifan Yuan, Rui Du, Kai Ma, Lanzheng Liu, and Windsor Hsu,Alibaba Group",
    "abstract": "Businesses increasingly need agile and elastic\ncomputing infrastructure to respond quickly to real world\nsituations. By offering efficient process-based virtualization and\na layered image system, containers are designed to enable agile\nand elastic application deployment. However, creating or updating\nlarge container clusters is still slow due to the image\ndownloading and unpacking process.\nIn this paper, we\npresent DADI Image Service, a block-level image service for increased agility\nand elasticity in deploying applications. DADI replaces the\nwaterfall model of starting containers (downloading image,\nunpacking image, starting container) with fine-grained on-demand\ntransfer of remote images, realizing instant start of\ncontainers. DADI optionally relies on a peer-to-peer architecture\nin large clusters to balance network traffic among all the\nparticipating hosts. DADI efficiently supports various kinds of\nruntimes including cgroups, QEMU, etc.,\nfurther realizing ``build once, run anywhere''. DADI has been\ndeployed at scale in the production environment of\nAlibaba, serving one of the world's largest ecommerce platforms. Performance\nresults show that DADI can cold start 10,000 containers on\n1,000 hosts within 4 seconds.",
    "link": "https://www.usenix.org/conference/atc20/presentation/li-huiba",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Efficient Miss Ratio Curve Computation for Heterogeneous Content Popularity",
    "authors": "Damiano Carra,University of Verona, Italy;Giovanni Neglia,Inria, Université Côte d’Azur, France",
    "abstract": "The Miss Ratio Curve (MRC) represents a fundamental tool for cache performance profiling. Approximate methods based on sampling provide a low-complexity solution for MRC construction. Nevertheless, in this paper we show that, in case of content with a large variance in popularity, the approximate MRC may be highly sensitive to the set of sampled content. We study in detail the impact of content popularity heterogeneity on the accuracy of the approximate MRC. We observe that few, highly popular, items may cause large error at the head of the reconstructed MRC. From these observations, we design a new approach for building an approximate MRC, where we combine an exact portion of the MRC with an approximate one built from samples. Results for different real-world traces show that our algorithm computes MRC with an error up to 10 times smaller than state-of-the-art methods based on sampling, with similar computational and space overhead.",
    "link": "https://www.usenix.org/conference/atc20/presentation/carra",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Can Applications Recover from fsync Failures?",
    "authors": "Anthony Rebello, Yuvraj Patel, Ramnatthan Alagappan, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau,University of Wisconsin - Madison",
    "abstract": "We analyze how file systems and modern data-intensive applications react to fsync failures. First, we characterize how three Linux file systems (ext4, XFS, Btrfs) behave in the presence of failures. We find commonalities across file systems (pages are always marked clean, certain block writes always lead to unavailability), as well as differences (page content and failure reporting is varied). Next, we study how five widely used applications (PostgreSQL, LMDB, LevelDB, SQLite, Redis) handle fsync failures. Our findings show that although applications use many failure-handling strategies, none are sufficient: fsync failures can cause catastrophic outcomes such as data loss and corruption. Our findings have strong implications for the design of file systems and applications that intend to provide strong durability guarantees.",
    "link": "https://www.usenix.org/conference/atc20/presentation/rebello",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "DupHunter: Flexible High-Performance Deduplication for Docker Registries",
    "authors": "Nannan Zhao, Hadeel Albahar, Subil Abraham, and Keren Chen,Virginia Tech;Vasily Tarasov, Dimitrios Skourtis, Lukas Rupprecht, and Ali Anwar,IBM Research—Almaden;Ali R. Butt,Virginia Tech",
    "abstract": "Containers are increasingly used in a broad spectrum of applications from cloud services to storage to supporting emerging edge computing paradigm. This has led to an explosive proliferation of container images. The associated storage performance and capacity requirements place high pressure on the infrastructure of registries, which store and serve images. Exploiting the high file redundancy in real-world images is a promising approach to drastically reduce the severe storage requirements of the growing registries. However, existing deduplication techniques largely degrade the performance of registry because of layer restore overhead. In this paper, we propose DupHunter, a new Docker registry architecture, which not only natively deduplicates layer for space savings but also reduces layer restore overhead. DupHunter supports several configurable deduplication modes , which provide different levels of storage efficiency, durability, and performance, to support a range of uses. To mitigate the negative impact of deduplication on the image download times, DupHunter introduces a two-tier storage hierarchy  with a novel layer prefetch/preconstruct cache algorithm based on user access patterns. Under real workloads, in the highest data reduction mode, DupHunter reduces storage space by up to 6.9x compared to the current implementations. In the highest performance mode, DupHunter can reduce the GET layer latency up to 2.8x compared to the state-of-the-art.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhao",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "OSCA: An Online-Model Based Cache Allocation Scheme in Cloud Block Storage Systems",
    "authors": "Yu Zhang,Huazhong University of Science and Technology;Ping Huang,Huazhong University of Science and Technology and Temple University;Ke Zhou and Hua Wang,Huazhong University of Science and Technology;Jianying Hu, Yongguang Ji, and Bin Cheng,Tencent Inc.",
    "abstract": "We propose an Online-Model based Scheme for Cache Allocation for shared cache servers among cloud block storage devices. OSCA can find a near-optimal configuration scheme at very low complexity improving the overall efficiency of the cache server. OSCA employs three techniques. First, it deploys a novel cache model to obtain a miss ratio curve (MRC) for each storage node in the cloud infrastructure block storage system. Our model uses a low overhead method to obtain data reuse distances from the ratio of re-access traffic to the total traffic within a time window. It then translates the obtained reuse distance distribution into miss ratio curves. Second, knowing the cache requirements of storage nodes, it defines the total hit traffic metric as the optimization target. Third, it searches for a near optimal configuration using a dynamic programming method and performs cache reassignment based on the solution. Experimental results with real-world workloads show that our model achieves a Mean Absolute Error (MAE) comparable to existing state-of-the-art techniques, but we can do without the overheads of trace collection and processing. Due to the improvement of hit ratio, OSCA reduces IO traffic to the back-end storage server by 13.2% relative to an equal-allocation-to-all-instances policy with the same amount of cache memory.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhang-yu",
    "session_title": "The One About Storage",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Lock-free Concurrent Level Hashing for Persistent Memory",
    "authors": "Zhangyu Chen, Yu Hua, Bo Ding, and Pengfei Zuo,Huazhong University of Science and Technology",
    "abstract": "With high memory density, non-volatility, and DRAM-scale latency, persistent memory (PM) is promising to improve the storage system performance. Hashing-based index structures have been widely used in storage systems to provide fast query services. Recent research proposes crash-consistent and write-efficient hashing indexes for PM. However, existing PM hashing schemes suffer from limited scalability due to expensive lock-based concurrency control, thus making multi-core parallel programing inefficient in PM. The coarse-grained locks used in hash table resizing and queries (i.e., search/insertion/update/deletion) exacerbate the contention. Moreover, the cache line flushes and memory fences for crash consistency in the critical path increase the latency. In order to address the lock contention for concurrent hashing indexes in PM, we propose clevel hashing, a lock-free concurrent level hashing, to deliver high performance with crash consistency. In the clevel hashing, we design a multi-level structure for concurrent resizing and queries. Resizing operations are performed by background threads without blocking concurrent queries. For concurrency control, atomic primitives are leveraged to enable lock-free search/insertion/update/deletion. We further propose context-aware schemes to guarantee the correctness of interleaved queries. Using real Intel Optane DC PMM, experimental results with real-world YCSB workloads show that clevel hashing obtains up to 4.2X speedup than the state-of-the-art PM hashing index.",
    "link": "https://www.usenix.org/conference/atc20/presentation/chen",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Optimizing Memory-mapped I/O for Fast Storage Devices",
    "authors": "Anastasios Papagiannis, Giorgos Xanthakis, Giorgos Saloustros, Manolis Marazakis, and Angelos Bilas,FORTH-ICS",
    "abstract": "Memory-mapped I/O provides several potential advantages over explicit read/write I/O, especially for low latency devices: (1) It does not require a system call, (2) it incurs almost zero overhead for data in memory (I/O cache hits), and (3) it removes copies between kernel and user space. However, the Linux memory-mapped I/O path suffers from several scalability limitations. We show that the performance of Linux memory-mapped I/O does not scale beyond 8 threads on a 32-core server. To overcome these limitations, we propose FastMap, an alternative design for the memory-mapped I/O path in Linux that provides scalable access to fast storage devices in multi-core servers, by reducing synchronization overhead in the common path. FastMap also increases device queue depth, an important factor to achieve peak device throughput. Our experimental analysis shows that FastMap scales up to 80 cores and provides up to 11.8× more IOPS compared to mmap using null_blk. Additionally, it provides up to 5.27× higher throughput using an Optane SSD. We also show that FastMap is able to saturate state-of-the-art fast storage devices when used by a large number of cores, where Linux mmap fails to scale.",
    "link": "https://www.usenix.org/conference/atc20/presentation/papagiannis",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "A Comprehensive Analysis of Superpage Management Mechanisms and Policies",
    "authors": "Weixi Zhu, Alan L. Cox, and Scott Rixner,Rice University",
    "abstract": "Superpages (2MB pages) can reduce the address translation overhead for large-memory workloads in modern computer systems. This paper clearly outlines the sequence of events in the life of a superpage and explores the design space of when and how to trigger and respond to those events.  This provides a framework that enables better understanding of superpage management and the trade-offs involved in different design decisions. Under this framework, this paper discusses why state-of-the-art designs exhibit different performance characteristics in terms of runtime, latency and memory consumption. This paper illuminates the root causes of latency spikes and memory bloat and introduces \nQuicksilver, a novel superpage\nmanagement design that addresses these issues while maintaining address translation performance.",
    "link": "https://www.usenix.org/conference/atc20/presentation/zhu-weixi",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Effectively Prefetching Remote Memory with Leap",
    "authors": "Hasan Al Maruf and Mosharaf Chowdhury,University of MichiganAwarded Best Paper!",
    "abstract": "Memory disaggregation over RDMA can improve the performance of memory-constrained applications by replacing disk swapping with remote memory accesses. However, state-of-the-art memory disaggregation solutions still use data path components designed for slow disks. As a result, applications experience remote memory access latency significantly higher than that of the underlying low-latency network, which itself can be too high for many applications.\nIn this paper, we propose Leap, a prefetching solution for remote memory accesses due to memory disaggregation. At its core, Leap employs an online, majority-based prefetching algorithm, which increases the page cache hit rate. We complement it with a lightweight and efficient data path in the kernel that isolates each application’s data path to the disaggregated memory and mitigates latency bottlenecks arising from legacy throughput-optimizing operations. Integration of Leap in the Linux kernel improves the median and tail remote page access latencies of memory-bound applications by up to 104.04× and 22.62×, respectively, over the default data path. This leads to up to 10.16× performance improvements for applications using disaggregated memory in comparison to the state-of-the-art solutions.",
    "link": "https://www.usenix.org/conference/atc20/presentation/al-maruf",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "go-pmem: Native Support for Programming Persistent Memory in Go",
    "authors": "Jerrin Shaji George, Mohit Verma, Rajesh Venkatasubramanian, and Pratap Subrahmanyam,VMware",
    "abstract": "Persistent memory offers persistence and byte-level addressability at DRAM-like speed. Operating system support and some user-level library support for persistent memory programming has emerged. But we think lack of native programming language support is an impediment to a programmer’s productivity.\nThis paper contributes go-pmem, an open-source extension to the Go language compiler and runtime that natively supports programming persistent memory. go-pmem extends Go to introduce a runtime garbage collected persistent heap. Often persistent data needs to be updated in a transactional (i.e., crash consistent) manner. To express transaction boundaries, go-pmem introduces a new txn block which can include most Go statements and function calls. go-pmem compiler uses static type analysis to log persistent updates and avoid logging volatile variable updates whenever possible.\nTo guide our design and validate our work, we developed a feature-poor Redis server go-redis-pmem using go-pmem. We show that go-redis-pmem offers more than 5x throughput than unmodified Redis using a high-end NVMe SSD on memtier benchmark and can restart up to 20x faster than unmodified Redis after a crash. In addition, using compiler microbenchmarks, we show go-pmem’s persistent memory allocator performs up to 40x better and transactions up to 4x faster than commercial libraries like PMDK and previous work like Mnemosyne.",
    "link": "https://www.usenix.org/conference/atc20/presentation/george",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "End the Senseless Killing: Improving Memory Management for Mobile Operating Systems",
    "authors": "Niel Lebeck, Arvind Krishnamurthy, and Henry M. Levy,University of Washington;Irene Zhang,Microsoft Research",
    "abstract": "To ensure low-latency memory allocation, mobile operating systems kill applications instead of swapping memory to disk.  This design choice shifts the burden of managing over-utilized memory to application programmers, requiring them to constantly checkpoint their application state to disk. This paper presents Marvin, a new memory manager for mobile platforms that efficiently supports swapping while meeting the strict performance requirements of mobile apps.  Marvin's swap-enabled language runtime is co-designed with OS-level memory management to avoid common pitfalls of traditional swap mechanisms. Its key features are: (1) a new swap mechanism, called ahead-of-time (AOT) swap, which pre-writes memory to disk, then harvests it quickly when needed, (2) a modified bookmarking garbage collector that avoids swapping in unused memory, and (3) an object-granularity working set estimator. Our experiments show that Marvin can run more than 2x as many concurrent apps as Android, and that Marvin can reclaim memory over 60x faster than Android with a Linux swap file can allocate memory under memory pressure.",
    "link": "https://www.usenix.org/conference/atc20/presentation/lebeck",
    "session_title": "The Memorable One",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Retwork: Exploring Reader Network with COTS RFID Systems",
    "authors": "Jia Liu and Xingyu Chen,Nanjing University;Shigang Chen,University of Florida;Wei Wang, Dong Jiang, and Lijun Chen,Nanjing University",
    "abstract": "Radio frequency identification has been gaining popularity in a variety of applications from shipping and transportation to retail industry and logistics management. With a limited reader-tag communication range, multiple readers (or reader antennas) must be used to provide full coverage to any deployment area beyond a few meters across. However, reader contention can seriously degrade the performance of the system or even block out some tags from being read. Most prior work on this problem requires hardware and protocol support that is incompatible with the EPC Gen2 standard. Moreover, they assume the knowledge of a reader network that precisely describes the contention relationship among all readers, but the efficient acquisition of the reader network in a practical system with commercial-off-the-shelf (COTS) tags is an open problem. This study fills the gap by proposing a novel protocol Retwork, which works under the limitations imposed by commercial Gen2-compatible tags and identifies all possible reader contentions efficiently through careful protocol design that exploits the flag-setting capability of these tags. We have implemented a prototype with 8,000 commercial tags. Extensive experiments demonstrate that Retwork can reduce communication overhead by an order of magnitude, in comparison to an alternative solution.",
    "link": "https://www.usenix.org/conference/atc20/presentation/liu-jia",
    "session_title": "The One on the Edge",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Acclaim: Adaptive Memory Reclaim to Improve User Experience in Android Systems",
    "authors": "Yu Liang and Jinheng Li,City University of Hong Kong;Rachata Ausavarungnirun,King Mongkut's University of Technology North Bangkok;Riwei Pan,City University of Hong Kong;Liang Shi,East China Normal University;Tei-Wei Kuo,City University of Hong Kong and National Taiwan University;Chun Jason Xue,City University of Hong Kong",
    "abstract": "While the Linux memory reclaim scheme is designed to deliver high throughput in server workloads, the scheme becomes inefficient on mobile device workloads. Through carefully designed experiments, this paper shows that the current memory reclaim scheme cannot deliver its desired performance due to two key reasons: page re-fault, which occurs when an evicted page is demanded again soon after, and direct reclaim, which occurs when the system needs to free up pages upon request time.  Unlike the server workload where the direct reclaim happens infrequently, multiple direct reclaims can happen in many common Android use cases. We provide further analysis that identifies the major sources of the high number of page re-faults and direct reclaims and propose Acclaim, a foreground aware and size-sensitive reclaim scheme. Acclaim consists of two parts: foreground aware eviction (FAE) and lightweight prediction-based reclaim scheme (LWP). FAE is used to relocate free pages from background applications to foreground applications. While LWP dynamically tunes the size and the amount of background reclaims according to the predicted allocation workloads. Experimental results show Acclaim can significantly reduce the number of page re-faults and direct reclaims with low overheads and delivers better user experiences for mobile devices.",
    "link": "https://www.usenix.org/conference/atc20/presentation/liang-yu",
    "session_title": "The One on the Edge",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "SweynTooth: Unleashing Mayhem over Bluetooth Low Energy",
    "authors": "Matheus E. Garbelini,Singapore University of Technology and Design;Chundong Wang,ShanghaiTech University;Sudipta Chattopadhyay,Singapore University of Technology and Design;Sun Sumei and Ernest Kurniawan,A*Star",
    "abstract": "The Bluetooth Low Energy (BLE) is a promising short-range  communication technology for Internet-of-Things (IoT) with  reduced energy consumption. Vendors implement BLE protocols  in their manufactured devices compliant to Bluetooth Core Specification.  Recently, several vulnerabilities were discovered in the BLE protocol  implementations of a few specific products via a manual approach.  Considering the diversity and usage of BLE devices as well as the  complexity of BLE protocols, we have developed a systematic and  comprehensive testing framework, which, as an automated and  general-purpose approach, can effectively fuzz any BLE protocol  implementation. Our framework runs in a central device and tests  a BLE device when the latter gets connected to the central as a  peripheral. Our framework incorporates a state machine model  of the suite of BLE protocols and monitors the peripheral’s state  through its responses. With the state machine and current state  of the central, our framework either sends malformed packets  or normal packets at a wrong time, or both, to the peripheral and  awaits an expected response. Anomalous behaviours of the  peripheral, e.g., a non-compliant response or unresponsiveness,  indicate potential vulnerabilities in its BLE protocol implementation.  To maximally expose such anomalies for a BLE device, our framework  employs an optimization function to direct the fuzzing process.  As of today, we have tested 12 devices from eight vendors and  four IoT products, with a total of 11 new vulnerabilities discovered  and 13 new Common Vulnerability Exposure (CVE) IDs assigned.  We call such a bunch of vulnerabilities as SWEYNTOOTH, which  highlights the efficacy of our framework.",
    "link": "https://www.usenix.org/conference/atc20/presentation/garbelini",
    "session_title": "The One on the Edge",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Fine-Grained Isolation for Scalable, Dynamic, Multi-tenant Edge Clouds",
    "authors": "Yuxin Ren,The George Washington University;Guyue Liu,Carnegie Mellon University;Vlad Nitu,INSA Lyon France;Wenyuan Shao, Riley Kennedy, Gabriel Parmer, and Timothy Wood,The George Washington University;Alain Tchana,ENS Lyon France",
    "abstract": "5G edge clouds promise a pervasive computational infrastructure a short network hop away, enabling a new breed of smart devices that respond in real-time to their physical surroundings. Unfortunately, today’s operating system designs fail to meet the goals of scalable isolation, dense multi-tenancy, and high performance needed for such applications. In this paper we introduce EdgeOS that emphasizes system-wide isolation as fine-grained as per-client. We propose a novel memory movement accelerator architecture that employs data copying to enforce strong isolation without performance penalties. To support scalable isolation, we introduce a new protection domain implementation that offers lightweight isolation, fast startup and low latency even under high churn. We implement EdgeOS in a microkernel based OS and demonstrate running high scale network middleboxes using the Click software router and endpoint applications such as memcached, a TLS proxy, and neural network inference. We reduce startup latency by 170X compared to Linux processes, and improve latency by three orders of magnitude when running 300 to 1000 edge-cloud memcached instances on one server.",
    "link": "https://www.usenix.org/conference/atc20/presentation/ren",
    "session_title": "The One on the Edge",
    "conference_name": "ATC",
    "date": "2020-07-15"
  },
  {
    "title": "Firefly: Untethered Multi-user VR for Commodity Mobile Devices",
    "authors": "Xing Liu,University of Minnesota, Twin Cities;Christina Vlachou,Hewlett Packard Labs;Feng Qian and Chendong Wang,University of Minnesota, Twin Cities;Kyu-Han Kim,Hewlett Packard Labs",
    "abstract": "Firefly is an untethered multi-user virtual reality (VR) system for commodity mobile devices. It supports more than 10 users to simultaneously enjoy high-quality VR content using a single commodity server, a single WiFi access point, and commercial off-the-shelf (COTS) mobile devices. Firefly employs a series of techniques including offline content preparation, viewport-adaptive streaming with motion prediction, adaptive content quality control among users, to name a few, to ensure good image quality, low motion-to-photon delay, a high frame rate at 60 FPS, scalability with respect to the number of users, and fairness among users. We have implemented Firefly in 17,400 lines of code. We use our prototype to demonstrate, for the first time, the feasibility of supporting 15 mobile VR users at 60 FPS using COTS smartphones and a single AP/server.",
    "link": "https://www.usenix.org/conference/atc20/presentation/liu-xing",
    "session_title": "The One on the Edge",
    "conference_name": "ATC",
    "date": "2020-07-15"
  }
]